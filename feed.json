{
    "version": "https://jsonfeed.org/version/1",
    "title": "博客",
    "subtitle": "欢迎来访~",
    "icon": "https://www.starlinglin.com/images/favicon.ico",
    "description": "StarlingLin的个人博客~",
    "home_page_url": "https://www.starlinglin.com",
    "items": [
        {
            "id": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%836%EF%BC%9A%E5%A0%86%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/",
            "url": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%836%EF%BC%9A%E5%A0%86%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/",
            "title": "椋鸟数据结构笔记#6：堆及其实现",
            "date_published": "2024-04-04T07:07:40.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h3 id=\"堆的概念\"><a class=\"anchor\" href=\"#堆的概念\">#</a> 堆的概念</h3>\n<blockquote>\n<p>如果有一个关键码的集合 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>k</mi><mn>0</mn><mo separator=\"true\">,</mo><mi>k</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>k</mi><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>k</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">K = \\lbrace k0,k1,k2,...,k_{n-1} \\rbrace</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> ，把它的所有元素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>K</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_i \\le K_{2i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> 且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>K</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_i \\le K_{2i+2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> （<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>K</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_i \\ge K_{2i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> 且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>K</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">K_i \\ge K_{2i+2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>），<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">i = 0,1,2,...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span>，则称为小堆（大堆）。</p>\n</blockquote>\n<p>上面这段定义似乎有些难以理解，但其实非常简单，堆就是一个完全二叉树，但是要满足<mark>所有子节点都小于其父节点</mark>或者<mark>所有父节点都小于其子节点</mark>。小堆也叫小根堆（根节点最小），大堆也叫大根堆（根节点最大）。</p>\n<p>下面是大根堆和小根堆的两张示意图：</p>\n<p><img data-src=\"1.png\" alt=\"大根堆\" title=\"大根堆\" /></p>\n<p><img data-src=\"2.png\" alt=\"小根堆\" title=\"小根堆\" /></p>\n<p>在这两张示意图中，大根堆的存储数组为 [9,6,8,5,3,4,7,2,1]，小根堆是 [1,3,4,4,5,8,7,9,6]</p>\n<h3 id=\"堆的实现\"><a class=\"anchor\" href=\"#堆的实现\">#</a> 堆的实现</h3>\n<p>我们想要构建一个堆，一般是给出一个数组，然后调整其元素顺序变成堆；或者是从一个空堆开始逐步插入元素构建堆，这里就涉及到<strong>堆的调整算法</strong>。</p>\n<p>对于不同的应用需求，我们可以选择向上调整构建堆或者向下调整构建堆，下面我们来详细说明这两者的区别。</p>\n<h4 id=\"由数组调整为堆\"><a class=\"anchor\" href=\"#由数组调整为堆\">#</a> 由数组调整为堆</h4>\n<p>由数组调整为堆我们一般选择<strong>通过向下调整算法来构建堆</strong></p>\n<h5 id=\"堆向下调整算法\"><a class=\"anchor\" href=\"#堆向下调整算法\">#</a> 堆向下调整算法</h5>\n<p>堆向下调整算法可以用来调整某一个元素的位置。</p>\n<p><strong>大根堆的向下调整</strong>：不断的将某个选定的节点与其两个子节点比较，如果子节点有比该节点大的，就将子节点中更大的那一个与该节点交换，然后反复重复这个过程直到该节点不能继续调整。</p>\n<p><strong>小根堆的向下调整</strong>：不断的将某个选定的节点与其两个子节点比较，如果子节点有比该节点小的，就将子节点中更小的那一个与该节点交换，然后反复重复这个过程直到该节点不能继续调整。</p>\n<h5 id=\"通过向下调整算法构建堆\"><a class=\"anchor\" href=\"#通过向下调整算法构建堆\">#</a> 通过向下调整算法构建堆</h5>\n<ol>\n<li><strong>找到倒数第一个非叶子节点</strong>：在一个完全二叉树中，如果节点总数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>，则倒数第一个非叶子节点的位置是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>N</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor N/2 \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">⌋</span></span></span></span>。这个节点之后的所有节点都是叶子节点，它们自然满足堆的性质。</li>\n<li><strong>从该非叶子节点开始向下调整</strong>：对于每个非叶子节点，应用向下调整算法，确保当前节点以及其子树满足堆的性质。</li>\n<li><strong>逆序遍历所有非叶子节点</strong>：继续向上，对每个非叶子节点重复进行向下调整的操作，直到根节点也被调整完成。</li>\n</ol>\n<p>这个过程被称为 “<strong>堆化</strong>”，看起来很复杂，但其实<mark>效率非常非常高</mark>。</p>\n<p>我们可以这样分析：</p>\n<ul>\n<li>树的最底层拥有约𝑁/2<em>N</em>/2 个节点，但这些节点都是叶子节点，不需要进行向下调整。</li>\n<li>上一层拥有约𝑁/4<em>N</em>/4 个节点，每个节点最多进行 1 次比较。</li>\n<li>再上一层拥有约𝑁/8<em>N</em>/8 个节点，每个节点最多进行 2 次比较。</li>\n<li>依此类推，直到根节点，每层的节点数大约是上一层的一半，而每个节点需要的比较次数大约是其所在层的深度。</li>\n<li>将这个过程的比较次数加总起来，会发现总的比较次数是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>也就是说这样构建一个堆的<span class=\"rainbow\"><strong>时间复杂度仅为</strong></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<h4 id=\"从空堆开始插入节点\"><a class=\"anchor\" href=\"#从空堆开始插入节点\">#</a> 从空堆开始插入节点</h4>\n<p>从空堆开始插入节点，我们一般选择<strong>通过向上调整算法来构建堆</strong></p>\n<h5 id=\"堆向上调整算法\"><a class=\"anchor\" href=\"#堆向上调整算法\">#</a> 堆向上调整算法</h5>\n<p>堆的向上调整算法与向下调整算法相反，是比较当前节点与其父节点并在必要时交换。</p>\n<p><strong>大根堆的向上调整</strong>：将当前节点的值与其父节点的值进行比较，如果当前节点的值大于其父节点的值，则需要交换这两个节点，重复这个过程。</p>\n<p><strong>小根堆的向上调整</strong>：将当前节点的值与其父节点的值进行比较，如果当前节点的值小于其父节点的值，则需要交换这两个节点，重复这个过程。</p>\n<h5 id=\"通过向上调整算法构建堆\"><a class=\"anchor\" href=\"#通过向上调整算法构建堆\">#</a> 通过向上调整算法构建堆</h5>\n<ol>\n<li><strong>逐个添加元素</strong>：从空堆开始，逐个将新元素添加到堆的末尾，即堆的下一个可用位置，以保持完全二叉树的结构。</li>\n<li><strong>向上调整</strong>：对于每个新添加的元素，应用向上调整算法，以确保新元素的添加不会破坏堆的性质。新元素与其父节点比较，并在需要时进行交换，这个过程一直持续到达堆的顶部或不需要进一步交换为止。</li>\n<li><strong>重复直到所有元素添加完毕</strong>：重复上述过程，直到所有元素都被添加到堆中，且整个堆满足最大堆或最小堆的性质。</li>\n</ol>\n<p>该算法每次插入的时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，因为每次插入后的向上调整最多需要从堆的底部调整到顶部，即跨越堆的高度，堆的高度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。但是并不能直接将它们相乘，因为这里的 N 是动态变化的，是从 1 开始逐渐增加到 N，那么我们就能得到如下计算式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mn>1</mn><mo>+</mo><mi>log</mi><mo>⁡</mo><mn>2</mn><mo>+</mo><mi>log</mi><mo>⁡</mo><mn>3</mn><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>3</mn><mo>×</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>×</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c} \\sum^{n}_{i=1}O(\\log i) = O(\\log 1 + \\log 2 + \\log 3 + ... + \\log N) \\\\ = O(\\log (1\\times2\\times3\\times...\\times N)) \\\\ = O(\\log (N!)) \\end {array}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.6000000000000005em;vertical-align:-1.5500000000000007em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>由根据斯特林近似，我们知道：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>≈</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo>−</mo><mi>N</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c} O(\\log (N!)) \\approx N\\log N - N \\end {array}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2000000000000002em;vertical-align:-0.35000000000000003em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>那么其<span class=\"rainbow\"><strong>时间复杂度就是</strong></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<h4 id=\"删除堆顶的元素\"><a class=\"anchor\" href=\"#删除堆顶的元素\">#</a> 删除堆顶的元素</h4>\n<p>如果我们想要删除堆中的一个元素，我们当然不能直接像数组那样把后面的元素往前挪，那我们应该怎么做呢？</p>\n<ol>\n<li><strong>交换元素</strong>：将堆顶元素与堆最后一个元素交换</li>\n<li><strong>删除数据</strong>：将原堆顶元素删除</li>\n<li><strong>向下调整</strong>：对新的堆顶执行向下调整操作</li>\n</ol>\n<p>这样我们就得到了删去堆顶元素的新堆啦～</p>\n<h4 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>heap.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//#define MIN_HEAP</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_HEAP</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MIN_HEAP</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">HEAP_COMPARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MIN_HEAP</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MAX_HEAP</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">HEAP_COMPARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// MAX_HEAP</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> HPDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Heap</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tHPDataType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Heap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapInit</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapInitArr</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapDestory</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapPush</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">,</span> HPDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>HPDataType <span class=\"token function\">HeapTop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapPop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 删除堆顶元素</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">HeapSize</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">HeapEmpty</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>heap.c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Heap.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapInit</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tphp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tphp<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tphp<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapInitArr</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tphp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tphp<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> php<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 向下调整</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> php<span class=\"token operator\">-></span>size<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapDestory</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tphp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tphp<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> php<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> HPDataType<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tHPDataType tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">HEAP_COMPARE</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tchild <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapPush</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">,</span> HPDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 扩容</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> php<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> newcapacity <span class=\"token operator\">=</span> php<span class=\"token operator\">-></span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">6</span> <span class=\"token operator\">:</span> php<span class=\"token operator\">-></span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tHPDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> newcapacity <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc fail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\tphp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\tphp<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> newcapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// 尾插</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tphp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>php<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">// 向上调整</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">AdjustUp</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> php<span class=\"token operator\">-></span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>HPDataType <span class=\"token function\">HeapTop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>size <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">return</span> php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>HPDataType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">HEAP_COMPARE</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token operator\">++</span>child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">HEAP_COMPARE</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\tparent <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\tchild <span class=\"token operator\">=</span> parent <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HeapPop</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>size <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>php<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token operator\">--</span>php<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token function\">AdjustDown</span><span class=\"token punctuation\">(</span>php<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> php<span class=\"token operator\">-></span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">HeapSize</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">return</span> php<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">HeapEmpty</span><span class=\"token punctuation\">(</span>Heap<span class=\"token operator\">*</span> php<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>php<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">return</span> php<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"堆的作用\"><a class=\"anchor\" href=\"#堆的作用\">#</a> 堆的作用</h3>\n<p>堆可以用于堆排序和 TopK 问题，具体的会在下一篇笔记讲解。</p>\n",
            "tags": [
                "计算机科学",
                "数据结构笔记",
                "数据结构",
                "二叉树",
                "堆"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%835%EF%BC%9A%E6%A0%91%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/",
            "url": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%835%EF%BC%9A%E6%A0%91%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/",
            "title": "椋鸟数据结构笔记#5：树、二叉树基础",
            "date_published": "2024-04-01T12:20:47.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"树\"><a class=\"anchor\" href=\"#树\">#</a> 树</h4>\n<p>树是一种<strong>非线性的数据结构</strong>，它是由 n 个节点组成的一个具有层次关系的数据集合。其大概结构如下图：</p>\n<p><img data-src=\"1.png\" alt=\"树示意图\" title=\"树示意图\" /></p>\n<p>其形状类似于一棵倒挂的树，由此得名。</p>\n<h5 id=\"树的相关概念\"><a class=\"anchor\" href=\"#树的相关概念\">#</a> 树的相关概念</h5>\n<ul>\n<li>节点：树中每一个存储数据的元被称为节点。上方示意图中 A~Q 都是这棵树的节点。</li>\n<li>根节点：<strong>根节点没有父节点</strong>，是整棵树的最上面的节点，是该树其他所有节点的发源。也就是上面示意图中的 A 节点。</li>\n<li>父节点（双亲节点）：就是树中与某节点相连但在其 “上方” 的节点。比方说，上方示意图中 A 是 BCDEFG 的父节点、E 是 IJ 的父节点。</li>\n<li>子节点（孩子节点）：与父节点相对，就是树中与某节点相连但在其 “下方” 的节点。比方说，上方示意图中 BCDEFG 都是 A 的子节点。</li>\n<li>兄弟节点：有相同父节点的节点互为兄弟节点。比方说，上方示意图中 B 与 C 互为兄弟节点、P 与 Q 互为兄弟节点。</li>\n<li>堂兄弟节点：只要两个节点互不为兄弟节点但处于树的<strong>同一层</strong>（与根节点的距离相同，则称其为堂兄弟节点。比方说，上方示意图中 H 与 J 互为堂兄弟节点。</li>\n<li>节点的祖先：一个节点到根节点的<strong>唯一路径</strong>上所有的节点都是该节点的祖先。比方说，上方示意图中 A 节点为所有节点的祖先。</li>\n<li>节点的子孙：又某一个节点 “向下” 延伸出来的所有节点都是该节点的子孙。比方说，上方示意图中其他所有节点都是 A 节点的子孙。</li>\n<li>子树：把<strong>根节点的一个子节点</strong>拿出来，这个节点与其所有子孙再次组成一棵树，这棵树就称为母树（原本的树）的一棵子树。比方说上方示意图中 E、I、J、P、Q 就构成了母树的一棵子树。<mark>注意子树可以只有一个根节点</mark></li>\n<li>节点的度：一个节点的子树的个数称为节点的度。比方说，上方示意图中 A 节点的度为 6</li>\n<li>树的度：一棵树最大的节点的度就是这棵树的度。比方说，上方示意图中树的度就是 A 节点的度，为 6.</li>\n<li>叶节点（终端节点）：度为 0 的节点（没有子节点）就是叶节点。比方说，上方示意图中 BCHIKLMNPQ 都是叶节点。</li>\n<li>分支节点（非终端节点）：度不为 0 的节点（有子节点）就是分支节点。比方说，上方示意图中 ADEFGJ 都是分支节点。</li>\n<li>森林：多颗不相连的树组成森林。</li>\n</ul>\n<h5 id=\"树的表示\"><a class=\"anchor\" href=\"#树的表示\">#</a> 树的表示</h5>\n<p>树的表示方法有多种，这里介绍较为常用的<strong>左孩子右兄弟表示法</strong>。这个方法能够让我们方便的向下查找。</p>\n<p>我们定义一个结构体作为树的节点：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> TDataType\t<span class=\"token comment\">// 树存储的数据类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Tree</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tTDataType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Tree</span><span class=\"token operator\">*</span> lChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Tree</span><span class=\"token operator\">*</span> rSibling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Tree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个结构体中，<strong>lChild 存储该节点最左边的子节点，rSibling 存储与其紧邻的右侧兄弟节点</strong>。</p>\n<p>这样，我们还是以上方示意图为例，为了方便我再次把图片贴出：</p>\n<p><img data-src=\"1.png\" alt=\"树示意图\" title=\"树示意图\" /></p>\n<p>如果我们想通过 A 节点找到 P 节点，这时问题就会变的非常简单了，只需要按照如下路线图寻找即可：</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">flowchart</span> LR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tid1<span class=\"token text string\">(A)</span><span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">lChlid</span><span class=\"token arrow operator\">--></span></span>id2<span class=\"token text string\">(B)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid2<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">rSibling*3</span><span class=\"token arrow operator\">--></span></span>id3<span class=\"token text string\">(E)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tid3<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">lChlid</span><span class=\"token arrow operator\">--></span></span>id4<span class=\"token text string\">(I)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tid4<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">rSibling</span><span class=\"token arrow operator\">--></span></span>id5<span class=\"token text string\">(J)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tid5<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">lChild</span><span class=\"token arrow operator\">--></span></span>id6<span class=\"token text string\">(P)</span></pre></td></tr></table></figure><p><strong>如果想要子节点也能向上寻找，那还可以再结构体中添加一个成员用于储存父节点。</strong></p>\n<h4 id=\"二叉树基础\"><a class=\"anchor\" href=\"#二叉树基础\">#</a> 二叉树基础</h4>\n<p>二叉树是一种特殊的树结构，其特征为<strong>每一个节点都<mark>有且只有</mark>两个子树或空子树</strong>。</p>\n<p>下方是一个二叉树的示意图（其中 2 节点的右子树就是空）：</p>\n<p><img data-src=\"2.png\" alt=\"二叉树示意图\" title=\"二叉树示意图\" /></p>\n<p>我们还可以更加抽象一点，下图同样也是一个二叉树：</p>\n<p><img data-src=\"3.png\" alt=\"奇怪的二叉树示意图\" title=\"奇怪的二叉树示意图\" /></p>\n<h5 id=\"二叉树分类\"><a class=\"anchor\" href=\"#二叉树分类\">#</a> 二叉树分类</h5>\n<p>有两种特殊的二叉树类型需要我们单独的来看一看，它们是<strong>满二叉树</strong>和<strong>完全二叉树</strong>。</p>\n<h6 id=\"满二叉树\"><a class=\"anchor\" href=\"#满二叉树\">#</a> 满二叉树</h6>\n<p>一个二叉树如果每一层的节点数都达到最大，那这就是一个满二叉树，一个 k 层的满二叉树的节点总数是 2<sup>k</sup> - 1 。</p>\n<p><img data-src=\"4.png\" alt=\"满二叉树示意图\" title=\"满二叉树示意图\" /></p>\n<h6 id=\"完全二叉树\"><a class=\"anchor\" href=\"#完全二叉树\">#</a> 完全二叉树</h6>\n<p>完全二叉树的概念看图很好理解，但是用文字描述就比较复杂了。<ins class=\"wavy\">对于深度为 K 的有 n 个节点的二叉树，当且仅当其每一个节点都与深度为 K 的满二叉树中编号从 1 至 n 的节点一一对应时称之为完全二叉树</ins>。</p>\n<p><img data-src=\"5.png\" alt=\"完全二叉树示意图\" title=\"完全二叉树示意图\" /></p>\n<h5 id=\"二叉树的性质\"><a class=\"anchor\" href=\"#二叉树的性质\">#</a> 二叉树的性质</h5>\n<ol>\n<li>一棵非空二叉树的<strong>第 i 层上最多有 2<sup>i-1</sup> 个节点</strong>。</li>\n<li>深度为 h 的二叉树的<strong>最大节点数是 2<sup>h</sup> - 1</strong> 。</li>\n<li>对任何一棵二叉树，<mark>若度为 0 的节点个数为 n<sub>0</sub> ，度为 2 的节点个数为 n<sub>2</sub> ，那么 n<sub>0</sub> =  n<sub>2</sub> + 1</mark> 。</li>\n<li>具有 n 个节点的<strong>满二叉树深度为 log<sub>2</sub>(n + 1)</strong> 。</li>\n<li>若逐层从左至右给每一个节点编号（<strong>根节点编号 0</strong>），那么对应序号为 i 的节点：\n<ol>\n<li><strong>i 的父节点的编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor (i-1)/2 \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">⌋</span></span></span></span> （当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> 时）</strong></li>\n<li><strong>i 的左孩子节点编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>（当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2i+1&lt;n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 时）</strong></li>\n<li><strong>i 的右孩子节点编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2i+2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>（当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2i+2&lt;n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 时）</strong></li>\n</ol>\n</li>\n</ol>\n<h5 id=\"二叉树的存储结构\"><a class=\"anchor\" href=\"#二叉树的存储结构\">#</a> 二叉树的存储结构</h5>\n<p>实现二叉树我们一般有两种存储结构，一种是<strong>顺序存储</strong>，一种是<strong>链式存储</strong>。</p>\n<h6 id=\"顺序存储\"><a class=\"anchor\" href=\"#顺序存储\">#</a> 顺序存储</h6>\n<p>顺序存储就是用顺序表（数组）来存储节点，<strong>一般来说只适用于完全二叉树</strong>。</p>\n<p>因为对于完全二叉树，我们可以逐层从左至右给节点编号，存储在数组对应位置，再通过二叉树的性质轻易找到其父节点或左右孩子节点。</p>\n<p><img data-src=\"6.png\" alt=\"二叉树顺序存储\" title=\"二叉树顺序存储\" /></p>\n<p>如果不是完全二叉树，这样中间就会有大量的空节点，造成空间浪费。</p>\n<p>对于这种存储方式，将在下一篇笔记通过堆（一种基于二叉树的数据结构）来实现与细致的讲解。</p>\n<h6 id=\"链式存储\"><a class=\"anchor\" href=\"#链式存储\">#</a> 链式存储</h6>\n<p>链式存储就是用链表来存储二叉树的节点。一般来说有两种实现，分别是二叉链和三叉链。</p>\n<p>二叉链就是链表的每个节点由数据域和左右指针域组成，左右指针分别指向左孩子与右孩子节点。对于一些更复杂的数据结构，我们可能会使用到基于三叉链的二叉树，也就是再增加一个指针指向其父节点。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Binary Tree 二叉树</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> BTDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 二叉链</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span><span class=\"token operator\">*</span> lChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span><span class=\"token operator\">*</span> rChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    BTDataType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> BTNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 三叉链</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span><span class=\"token operator\">*</span> lChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span><span class=\"token operator\">*</span> rChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BTNode</span><span class=\"token operator\">*</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    BTDataType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> BTNode<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "数据结构笔记",
                "数据结构",
                "二叉树"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%834%EF%BC%9A%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/",
            "url": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%834%EF%BC%9A%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/",
            "title": "椋鸟数据结构笔记#4：栈与队列",
            "date_published": "2024-03-30T11:19:37.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h4>\n<p>栈是一种特殊的线性表，是一种遵循后进先出（LIFO, Last In First Out）原则的数据结构。想象一下一摞盘子，你最后放上去的盘子会是你第一个拿掉的；同样地，在栈中，最后存入的数据会是第一个被取出来的。</p>\n<p>其中，进行数据的增加和删除的一端称为<strong>栈顶</strong>，另一端称为<strong>栈底</strong>。数据进入栈的过程称为<strong>压栈（入栈）</strong>，数据删除的过程称为<strong>弹栈（出栈）</strong>。</p>\n<h5 id=\"栈的实现\"><a class=\"anchor\" href=\"#栈的实现\">#</a> 栈的实现</h5>\n<p>栈一般可以通过<strong>数组（顺序表）或链表</strong>实现，但是数组实现优于链表，因为仅在数组尾部插入删除数据代价较小。其基本操作有：</p>\n<ol>\n<li><strong>Push（入栈）</strong>: 添加一个或多个新元素到栈顶。</li>\n<li><strong>Pop（出栈）</strong>: 移除栈顶的元素，并返回该元素。</li>\n<li><strong>Peek（查看栈顶元素）</strong>: 返回栈顶的元素，但不从栈中移除它。</li>\n<li><strong>IsEmpty（判断栈是否为空）</strong>: 检查栈是否为空。如果栈为空，返回 true；否则返回 false。</li>\n<li><strong>Size（获取栈的大小）</strong>: 返回栈中元素的数量。</li>\n</ol>\n<p>下面给出顺序表栈的实现代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>Stack.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> STDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tSTDataType<span class=\"token operator\">*</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> _top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> _capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Stack<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> pStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 栈的初始化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InitStack</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 压栈</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">,</span> STDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 弹栈</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 栈顶元素</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>STDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 栈大小</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 栈判空</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">_Bool</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 栈销毁</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDestory</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>Stack.c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Stack.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 栈的初始化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InitStack</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 容量检查扩容</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackCheck</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-></span>_top <span class=\"token operator\">==</span> pst<span class=\"token operator\">-></span>_capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-></span>_capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> pst<span class=\"token operator\">-></span>_capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tSTDataType<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>STDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-></span>_data<span class=\"token punctuation\">,</span> newCapacity <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tpst<span class=\"token operator\">-></span>_data <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpst<span class=\"token operator\">-></span>_capacity <span class=\"token operator\">=</span> newCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 压栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">,</span> STDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">StackCheck</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-></span>_data<span class=\"token punctuation\">[</span>pst<span class=\"token operator\">-></span>_top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STDataType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 弹栈</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 栈顶元素</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>STDataType <span class=\"token function\">StackTop</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> pst<span class=\"token operator\">-></span>_data<span class=\"token punctuation\">[</span>pst<span class=\"token operator\">-></span>_top <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 栈大小</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackSize</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> pst<span class=\"token operator\">-></span>_top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 栈判空</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">_Bool</span> <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> pst<span class=\"token operator\">-></span>_top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 栈销毁</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDestory</span><span class=\"token punctuation\">(</span>pStack pst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pst<span class=\"token operator\">-></span>_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpst<span class=\"token operator\">-></span>_data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"队列\"><a class=\"anchor\" href=\"#队列\">#</a> 队列</h4>\n<p>队列也是一种特殊的顺序表，是一种遵循先进先出（FIFO, First In First Out）原则的数据结构。可以把队列想象成在银行或超市等待服务的人们排成的一行，最先到达的人将是最先得到服务并离开的。</p>\n<p>其中，进行数据的插入的一端称为<strong>队尾</strong>，进行删除的一端称为<strong>队头</strong>，数据的进入与删除称为<strong>入队和出队</strong>。</p>\n<h5 id=\"队列的实现\"><a class=\"anchor\" href=\"#队列的实现\">#</a> 队列的实现</h5>\n<p>队列同样可以通过<strong>数组（顺序表）或链表</strong>实现，但是链表实现优于数组，因为使用数组的话从队头删除数据的效率就比较低下了。其基本操作有：</p>\n<ol>\n<li><strong>Enqueue（入队）</strong>: 在队列的末尾添加一个或多个元素。</li>\n<li><strong>Dequeue（出队）</strong>: 移除队列前端的元素，并返回该元素。</li>\n<li><strong>Front（查看队首元素）</strong>: 返回队列最前端的元素，但不从队列中移除它。</li>\n<li><strong>IsEmpty（判断队列是否为空）</strong>: 检查队列是否为空。如果队列为空返回 true；否则返回 false。</li>\n<li><strong>Size（获取队列的大小）</strong>: 返回队列中元素的数量。</li>\n</ol>\n<p>下面给出链表队列的实现代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>Queue.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 队列数据类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QueueData</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 队列</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tQueueData _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">QueueNode</span><span class=\"token operator\">*</span> _next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> QueueNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 储存队列头尾信息的指针</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Queue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tQueueNode<span class=\"token operator\">*</span> _front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tQueueNode<span class=\"token operator\">*</span> _rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 队列的初始化</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueueInit</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueuePush</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> QueueData x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueuePop</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 队列头</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>QueueData <span class=\"token function\">QueueFront</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 队列尾</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>QueueData <span class=\"token function\">QueueBack</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 队列长</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">QueueSize</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 队列判空</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">_Bool</span> <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 队列销毁</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueueDestory</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>Queue.c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Queue.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 队列的初始化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueueInit</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_front <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueuePush</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">,</span> QueueData x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tQueueNode<span class=\"token operator\">*</span> new <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>QueueNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>QueueNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tnew<span class=\"token operator\">-></span>_data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tnew<span class=\"token operator\">-></span>_next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_rear<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpq<span class=\"token operator\">-></span>_rear<span class=\"token operator\">-></span>_next <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tpq<span class=\"token operator\">-></span>_rear <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpq<span class=\"token operator\">-></span>_front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-></span>_rear <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueuePop</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_front <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_front<span class=\"token operator\">-></span>_next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tpq<span class=\"token operator\">-></span>_front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-></span>_rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tQueueNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> pq<span class=\"token operator\">-></span>_front<span class=\"token operator\">-></span>_next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tpq<span class=\"token operator\">-></span>_front <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 队列头</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>QueueData <span class=\"token function\">QueueFront</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> pq<span class=\"token operator\">-></span>_front<span class=\"token operator\">-></span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 队列尾</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>QueueData <span class=\"token function\">QueueBack</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token operator\">-></span>_rear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> pq<span class=\"token operator\">-></span>_rear<span class=\"token operator\">-></span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">// 队列长</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">QueueSize</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">return</span> pq<span class=\"token operator\">-></span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 队列判空</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">_Bool</span> <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span> pq<span class=\"token operator\">-></span>_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 队列销毁</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">QueueDestory</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> pq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\tQueueNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pq<span class=\"token operator\">-></span>_front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\tQueueNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>_next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_front <span class=\"token operator\">=</span> pq<span class=\"token operator\">-></span>_rear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\tpq<span class=\"token operator\">-></span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"循环队列\"><a class=\"anchor\" href=\"#循环队列\">#</a> 循环队列</h5>\n<p>有一种特殊的队列，称为循环队列。</p>\n<p>循环队列是一种<strong>使用有限数组</strong>并采用特殊规则来<strong>模拟无限长度队列</strong>行为的数据结构。</p>\n<p>它的核心思想是当数组达到末端时，会循环回到数组的开头，继续使用数组的前端空间。这种方式解决了在普通队列中使用数组实现时可能遇到的空间浪费问题。</p>\n<p>在普通队列中，即使在数组前端有空闲空间，一旦队尾达到数组末端，就不能再添加新元素，除非进行昂贵的数组复制或移动操作。循环队列通过循环利用数组空间，优雅地解决了这一问题。</p>\n<p>这里可以参考 leetcode 第 622 题，解答如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>力扣-第622题</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tY2lyY3VsYXItcXVldWUv\">题目链接</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyCircularQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>MyCircularQueue<span class=\"token operator\">*</span> <span class=\"token function\">myCircularQueueCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    MyCircularQueue<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    tmp<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    tmp<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    tmp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">-></span>capacity <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>bool <span class=\"token function\">myCircularQueueEnQueue</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> obj<span class=\"token operator\">-></span>capacity <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>front<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    obj<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>obj<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> obj<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>bool <span class=\"token function\">myCircularQueueDeQueue</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>front<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    obj<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>front <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> obj<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myCircularQueueFront</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>front <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>obj<span class=\"token operator\">-></span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myCircularQueueRear</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>front <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">+</span> obj<span class=\"token operator\">-></span>capacity <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> obj<span class=\"token operator\">-></span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>bool <span class=\"token function\">myCircularQueueIsEmpty</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre> </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>bool <span class=\"token function\">myCircularQueueIsFull</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> obj<span class=\"token operator\">-></span>capacity <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myCircularQueueFree</span><span class=\"token punctuation\">(</span>MyCircularQueue<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"一些练习题\"><a class=\"anchor\" href=\"#一些练习题\">#</a> 一些练习题</h4>\n<ol>\n<li class=\"quiz\">\n<p>一个栈的初始状态为空。现将元素 1、2、3、4、5、A、B、C、D、E 依次入栈，然后再依次出栈，则元素出栈的顺序是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>12345ABCDE</li>\n<li class=\"correct\">EDCBA54321</li>\n<li>ABCDE12345</li>\n<li>54321EDCBA</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若进栈序列为 1,2,3,4 进栈过程中可以出栈，则下列不可能的一个出栈序列是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>1, 4, 3, 2</li>\n<li>2, 3, 4, 1</li>\n<li class=\"correct\">3, 1, 4, 2</li>\n<li>3, 4, 2, 1</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>循环队列的存储空间为 Q (1:100) ，初始状态为 front=rear=100 。经过一系列正常的入队与退队操作后，front=rear=99 ，则循环队列中的元素个数为 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>1</li>\n<li>2</li>\n<li>99</li>\n<li class=\"correct\">0 或 100</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>以下<span class=\"gap\"></span>不是队列的基本运算？</p>\n<ul class=\"options\">\n<li>从队尾插入一个新元素</li>\n<li class=\"correct\">从队列中删除第 i 个元素</li>\n<li>判断一个队列是否为空</li>\n<li>读取队头元素的值</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>现有一循环队列，其队头指针为 front，队尾指针为 rear; 循环队列长度为 N 。其队内有效长度为<span class=\"gap\"></span>？(假设队头不存放数据)</p>\n<ul class=\"options\">\n<li>(rear - front + N) % N + 1</li>\n<li class=\"correct\">(rear - front + N) % N</li>\n<li>(rear - front) % (N + 1)</li>\n<li>(rear - front + N) % (N - 1)</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "数据结构笔记",
                "数据结构",
                "链表",
                "顺序表",
                "栈",
                "队列"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%833%EF%BC%9A%E9%93%BE%E8%A1%A8/",
            "url": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%833%EF%BC%9A%E9%93%BE%E8%A1%A8/",
            "title": "椋鸟数据结构笔记#3：链表",
            "date_published": "2024-03-30T08:09:31.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"链表的定义\"><a class=\"anchor\" href=\"#链表的定义\">#</a> 链表的定义</h4>\n<p>链表是一种基于指针的，<strong>物理结构不连续而逻辑结构连续</strong>的数据结构。大概就是说，把一个一个数据存放在一个一个节点中，每一个节点可能创建在内存的不同区域，但是每个节点都包括了至少一个指向下一个节点的指针。这样，我们就可以通过指针来按顺序找到整个链表的数据。</p>\n<p>我们一般创建一个结构体类型作为链表的节点，结构体的成员包括若干数据和若干指针，其中数据部分称为链表的<strong>数据域</strong>，指针部分称为链表的<strong>指针域</strong>。（<strong>有些指针属于数据，要具体分析其功能</strong>）</p>\n<h4 id=\"链表的分类\"><a class=\"anchor\" href=\"#链表的分类\">#</a> 链表的分类</h4>\n<h5 id=\"方向单向还是双向\"><a class=\"anchor\" href=\"#方向单向还是双向\">#</a> 方向（单向还是双向）</h5>\n<p>链表可以是<strong>单向</strong>的也可以是<strong>双向</strong>的。</p>\n<p>单向代表链表每个节点的指针域指向其下一个节点，可以顺着指针一路向后寻找而不能反过来向前寻找；而双向链表的节点一般有两个指针，一个指向后一个节点，另一个指向前一个节点。</p>\n<h5 id=\"头节点哨兵节点的有无\"><a class=\"anchor\" href=\"#头节点哨兵节点的有无\">#</a> 头节点（哨兵节点）的有无</h5>\n<p>头结点本身不存储任何实际的数据元素，而是<strong>作为链表的第一个节点</strong>存在，其主要作用是指向链表的第一个实际存储数据的节点。使用头结点的好处在于可以<strong>使链表的插入和删除操作更加统一和简洁</strong>，因为即使是在链表的开头进行操作，也不需要对链表进行特殊处理，从而<strong>避免了一些边界条件的检查</strong>。</p>\n<p>在不带头结点的链表中，插入新的第一个元素或删除现有的第一个元素时，需要特别处理链表的头指针，这可能会使代码变得复杂且容易出错。而在带有头结点的链表中，无论插入或删除操作发生在链表的哪个位置，操作流程都是统一的，因为头结点<strong>为链表提供了一个统一的入口</strong>。</p>\n<h5 id=\"循环或不循环\"><a class=\"anchor\" href=\"#循环或不循环\">#</a> 循环或不循环</h5>\n<p>如果链表的最后一个节点再次指向整个链表的第一个节点（哨兵节点或数据节点），那么这个链表就是循环的。循环的结构可以为实现很多比较复杂的数据处理功能带来便利。</p>\n<h5 id=\"8-种分类\"><a class=\"anchor\" href=\"#8-种分类\">#</a> 8 种分类</h5>\n<p>所以从上面 3 个角度考虑，链表一共可以分为 8 种（排列组合），但是最常用的有两种：<strong>不带头单向不循环链表（简称单链表）、带头双向循环链表</strong>。</p>\n<p>这两种链表中，单链表结构最简单，但是一般不会直接使用，而是作为一些更复杂的数据结构的子结果，也频繁出现在试题中。</p>\n<p>而带头双向循环链表则是实际作为链表使用最频繁的，在实现诸多功能上都存在明显优势。</p>\n<p>下面是 8 种链表的示意图：</p>\n<p><img data-src=\"%E4%B8%8D%E5%B8%A6%E5%A4%B4%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"不带头单向不循环链表\" title=\"不带头单向不循环链表\" /></p>\n<p><img data-src=\"%E4%B8%8D%E5%B8%A6%E5%A4%B4%E5%8D%95%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"不带头单向循环链表\" title=\"不带头单向循环链表\" /></p>\n<p><img data-src=\"%E4%B8%8D%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"不带头双向不循环链表\" title=\"不带头双向不循环链表\" /></p>\n<p><img data-src=\"%E4%B8%8D%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"不带头双向循环链表\" title=\"不带头双向循环链表\" /></p>\n<p><img data-src=\"%E5%B8%A6%E5%A4%B4%E5%8D%95%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"带头单向不循环链表\" title=\"带头单向不循环链表\" /></p>\n<p><img data-src=\"%E5%B8%A6%E5%A4%B4%E5%8D%95%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"带头单向循环链表\" title=\"带头单向循环链表\" /></p>\n<p><img data-src=\"%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E4%B8%8D%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"带头双向不循环链表\" title=\"带头双向不循环链表\" /></p>\n<p><img data-src=\"%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png\" alt=\"带头双向循环链表\" title=\"带头双向循环链表\" /></p>\n<h4 id=\"不带头单向不循环链表的实现\"><a class=\"anchor\" href=\"#不带头单向不循环链表的实现\">#</a> 不带头单向不循环链表的实现</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>SList.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不带头单向不循环链表 (single linked list)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 单链表节点的值类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 单链表节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SListNode</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tSLDataType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">SListNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SListNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 单链表的初始化</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SListInit</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>pList<span class=\"token punctuation\">)</span> SListNode<span class=\"token operator\">*</span> pList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 单链表的销毁</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListDestory</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 单链表的头插</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 单链表的尾插</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 单链表指定位置后插入</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 单链表指定位置前插入</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertBefore</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 单链表的头删</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 单链表的尾删</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPopBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 单链表删除指定位置的节点</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListErase</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 单链表指定位置后删除</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 单链表指定位置前删除</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseBefore</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 单链表删除所有指定值的节点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListRemove</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 单链表查找</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFind</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 单链表中间节点</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFindMidNode</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 单链表的长度</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">SListSize</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 单链表的判空</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">SListEmpty</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 单链表打印</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPrint</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 单链表逆序</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListReverse</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 单链表冒泡排序</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListBubbleSort</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// 合并两个有序链表</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListMerge</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList1<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pList2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>SList.c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SList.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 单链表的销毁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListDestory</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token operator\">*</span>ppList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 新节点申请</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListBuyNode</span><span class=\"token punctuation\">(</span>SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tnewNode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tnewNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 单链表的头插</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">SListBuyNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tnewNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token operator\">*</span>ppList <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 单链表的尾插</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPushBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">SListBuyNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ppList <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 单链表指定位置后插入</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">SListBuyNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tnewNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpos<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 单链表指定位置前插入</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListInsertBefore</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token operator\">&amp;&amp;</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 空链表或者 pos 为头节点</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token function\">SListPushFront</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">SListBuyNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tnewNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">// 单链表的头删</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ppList <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">// 单链表的尾删</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPopBack</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ppList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token comment\">// 单链表删除指定位置的节点</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListErase</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token operator\">&amp;&amp;</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token comment\">// 单链表指定位置后删除</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseAfter</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\tpos<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token comment\">// 单链表指定位置前删除</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListEraseBefore</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token operator\">&amp;&amp;</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 空链表或者 pos 为头节点</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> pos<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//pos 为第二个节点</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t<span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token comment\">// 单链表删除所有指定值的节点</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListRemove</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t\t\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t\t\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t\t\t<span class=\"token function\">SListPopFront</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token comment\">// 单链表查找</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFind</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre><span class=\"token comment\">// 单链表中间节点</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListFindMidNode</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> pList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> pList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t\tfast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>\t\tslow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\t<span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre></pre></td></tr><tr><td data-num=\"263\"></td><td><pre><span class=\"token comment\">// 单链表的长度</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">SListSize</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t<span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre><span class=\"token comment\">// 单链表的判空</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">SListEmpty</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t<span class=\"token keyword\">return</span> pList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre></pre></td></tr><tr><td data-num=\"283\"></td><td><pre><span class=\"token comment\">// 单链表打印</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListPrint</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> pList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d->\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre></pre></td></tr><tr><td data-num=\"297\"></td><td><pre><span class=\"token comment\">// 单链表逆序</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListReverse</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> ppList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ppList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> nextNext <span class=\"token operator\">=</span> next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>\t\t\tnext<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>\t\t\tnext <span class=\"token operator\">=</span> nextNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextNext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>\t\t\t\tnextNext <span class=\"token operator\">=</span> nextNext<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ppList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ppList <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre></pre></td></tr><tr><td data-num=\"326\"></td><td><pre><span class=\"token comment\">// 单链表冒泡排序</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SListBubbleSort</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pList <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pList<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>\t\tSListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 尾节点</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span>pList<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 只有一个节点时，tail==*pList</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>\t\t\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pList<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 当前节点</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>\t\t\tSListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 下一个节点</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>\t\t\tSListNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 当前节点的前一个节点</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 只有两个节点时，next==tail</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data <span class=\"token operator\">></span> next<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 交换</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>pList<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 头节点交换</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>\t\t\t\t\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>\t\t\t\t\t\tnext<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>\t\t\t\t\t\t<span class=\"token operator\">*</span>pList <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>\t\t\t\t\t\tprev <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>\t\t\t\t\t\tnext <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>\t\t\t\t\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>\t\t\t\t\t\tnext<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>\t\t\t\t\t\tprev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>\t\t\t\t\t\tprev <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>\t\t\t\t\t\tnext <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span>\t<span class=\"token comment\">// 不交换</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>\t\t\t\t\tprev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>\t\t\t\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>\t\t\t\t\tnext <span class=\"token operator\">=</span> next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>\t\t\ttail <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre></pre></td></tr><tr><td data-num=\"376\"></td><td><pre><span class=\"token comment\">// 单链表合并</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>SListNode<span class=\"token operator\">*</span> <span class=\"token function\">SListMerge</span><span class=\"token punctuation\">(</span>SListNode<span class=\"token operator\">*</span> pList1<span class=\"token punctuation\">,</span> SListNode<span class=\"token operator\">*</span> pList2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pList1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> pList2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pList2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> pList1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> newList <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur1 <span class=\"token operator\">=</span> pList1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur2 <span class=\"token operator\">=</span> pList2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>\tSListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur1 <span class=\"token operator\">&amp;&amp;</span> cur2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur1<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;</span> cur2<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>\t\t\t\tnewList <span class=\"token operator\">=</span> cur <span class=\"token operator\">=</span> cur1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>\t\t\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>\t\t\tcur1 <span class=\"token operator\">=</span> cur1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>\t\t\t\tnewList <span class=\"token operator\">=</span> cur <span class=\"token operator\">=</span> cur2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>\t\t\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>\t\t\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>\t\t\tcur2 <span class=\"token operator\">=</span> cur2<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>\t\tcur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>\t<span class=\"token keyword\">return</span> newList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"带头单向循环链表的实现\"><a class=\"anchor\" href=\"#带头单向循环链表的实现\">#</a> 带头单向循环链表的实现</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>List.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 带头双向不循环链表（List）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义数据类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> LTDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 定义链表节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tLTDataType data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">*</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> ListNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 申请节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>LTDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 销毁链表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListDestory</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pphead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 尾插</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 头插</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 尾删</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 头删</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 在 pos 位置之后插入 x</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 删除 pos 位置的节点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>List.c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"List.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 申请节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>LTDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newnode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ListInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> phead <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LTDataType<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tphead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> phead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 销毁链表</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListDestory</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> pphead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pphead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pphead <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> phead <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pphead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token operator\">*</span>pphead <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPrint</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d->\"</span><span class=\"token punctuation\">,</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tail\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 尾插</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPushBack</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\ttail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tphead<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 头插</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPushFront</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tphead<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tphead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// 尾删</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPopBack</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\tprev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\tphead<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">// 头删</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListPopFront</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> first <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> second <span class=\"token operator\">=</span> first<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\tphead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tsecond<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> phead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">ListFind</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> phead<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>phead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> phead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> phead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">// 在 pos 位置之后插入 x</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">,</span> LTDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> newnode <span class=\"token operator\">=</span> <span class=\"token function\">BuyListNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\tnewnode<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tpos<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tpos<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\">// 删除 pos 位置的节点</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ListErase</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> pos<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> pos<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\tprev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\tnext<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"链表与顺序表的差异\"><a class=\"anchor\" href=\"#链表与顺序表的差异\">#</a> 链表与顺序表的差异</h4>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>链表</th>\n<th>顺序表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理结构</td>\n<td>不连续</td>\n<td>连续</td>\n</tr>\n<tr>\n<td>随机访问（通过下标任意的访问节点）</td>\n<td>不支持，O (N)</td>\n<td>支持，O (1)</td>\n</tr>\n<tr>\n<td>任意位置插入删除</td>\n<td>只需要修改指针的方向即可</td>\n<td>可能需要大量挪移数据，效率低下</td>\n</tr>\n<tr>\n<td>容量</td>\n<td>没有容量的概念</td>\n<td>需要管理容量，扩容</td>\n</tr>\n<tr>\n<td>应用场景</td>\n<td>频繁发生任意位置插入时</td>\n<td>需要高效频繁访问各节点元素时</td>\n</tr>\n<tr>\n<td>缓存命中（意味着 CPU 访问内存的效率）</td>\n<td>低</td>\n<td>高</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "数据结构笔记",
                "数据结构",
                "链表",
                "顺序表"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%832%EF%BC%9A%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "url": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%832%EF%BC%9A%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "title": "椋鸟数据结构笔记#2：复杂度",
            "date_published": "2024-03-27T06:55:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h4>\n<p>复杂度是衡量算法好坏的一种方式。一般分为<strong>时间复杂度</strong>和<strong>空间复杂度</strong>，分别用于衡量一个算法在<strong>运行时间长短和占据内存空间多少</strong>两方面的优劣。</p>\n<p>一般我们考察复杂度就是找到相关的代数式，将<strong>常数全部忽略，将非最高次项全部忽略</strong>，在用括号括起来，前面写一个大 O。这就是复杂度的<strong>大 O 表示法</strong>。</p>\n<p>比方说，对于代数式 3N^2+2N+4，我们只取 N^2；对于 2N+4M+1，我们只取 M+N。</p>\n<p>（未知数的选用是随意的）</p>\n<p>至于这个代数式如何找到，且看下方。</p>\n<h5 id=\"时间复杂度\"><a class=\"anchor\" href=\"#时间复杂度\">#</a> 时间复杂度</h5>\n<p>时间复杂度的表达式就是<strong>算法执行基本语句的次数与未知量之间的代数关系（一般考虑最坏情况下的关系）</strong>。</p>\n<p>比方说下面这一个函数，不含未知数，其基本语句的运行次数是常数次，时间复杂度就是 O (1)。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而下面这个函数含有未知数，循环中的代码段要运行 N 次，那么时间复杂度就是 O (n)。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而下面这个函数虽然有两个循环，但是相互独立，一个运行 N 次，一个运行 2N 次，一共是 3N 次，舍去常数后，时间复杂度还是 O (N)。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是要注意两个未知数一样时才能合并，不然就还是要写成两个未知数的代数式。比方说下面这一段的时间复杂度为 O (M+N)。（<strong>如果说明 M 远大于 N 则可以省略 N；如果 MN 存在代数关系则需要计算</strong>）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>a<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span>b<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而下面这一段函数的时间复杂度为 O (M^2+N)，因为两个未知数是独立的，舍去非最高次项时不能舍弃含有其他未知数的项。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>a<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span>a<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span>b<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再复杂一点，我们看看冒泡排序的时间复杂度，其结果为 O (n^2)：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 冒泡排序，并打印比较次数和移动次数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">_Bool</span> flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> cnt1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> swi <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tflag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tswi <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\tp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\tp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> swi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\tflag <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tcnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tcnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span> cnt1<span class=\"token punctuation\">,</span> cnt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>表达式也有可能含有其他数学运算，比方说二分搜素的时间复杂度就是 O (logN)<strong>（注意对数的底数省略不写）</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bin_search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\ti <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tleft <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tright <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>甚至更复杂的，有些表达式想要求出来需要较复杂的数列运算，包括但不限于使用等比数列求和公式、差比数列求和公式、裂项相消、配项......</p>\n<h5 id=\"空间复杂度\"><a class=\"anchor\" href=\"#空间复杂度\">#</a> 空间复杂度</h5>\n<p>空间复杂度的表达式描述的是使用某算法所需要的 <strong>“额外” 空间开销</strong>与未知数的关系（同样是<strong>一般考虑最坏情况</strong>）。</p>\n<p>首先，我们要注意这里的空间开销是<strong>算法额外产生的而不包括原本就开辟的空间</strong>。</p>\n<p>比方说，下面这个函数用于将一个数组的数据复制到另一个数组，那么本身就存在的数组的空间当然不能算在算法的空间开销中，其额外开辟的空间只有变量 i，则空间复杂度为 O (1)。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">copyArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而如果我们写成这样，空间复杂度就变成 O (N) 了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">copyArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arrTmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        arrTmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrTmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>空间复杂度也可以变的较为复杂，比方说求斐波那契数列的空间复杂度：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Feb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> n <span class=\"token operator\">||</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Feb</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Feb</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>想要算明白这个，需要对递归和函数栈帧（详见函数栈帧相关博客）有更深刻的理解。</p>\n<p>由于递归不是一层一层进行的，所以其<strong>空间复杂度并不是总共开辟的栈帧空间的数量</strong>。</p>\n<p>递归是一条路走到底再返回走其他路的，所以<strong>空间复杂度等于其路径深度</strong>，也就是 O (N)。</p>\n<p>（这里学过深度优先搜素 dfs 就清楚了）</p>\n<h4 id=\"通过复杂度衡量算法好坏\"><a class=\"anchor\" href=\"#通过复杂度衡量算法好坏\">#</a> 通过复杂度衡量算法好坏</h4>\n<p>一般我们认为，对于一个算法而言，其优劣可以通过未知数趋于无穷时的复杂度体现。而一般我们可以通过下面的不等式链比较复杂度：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>N</mi></msup><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c}\nO(N^N)&gt;O(N!)&gt;O(2^N)&gt;O(N^3)&gt;O(N^2)&gt;O(NlogN)&gt;O(N)&gt;O(logN)&gt;O(1)\n\\end {array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.201331em;vertical-align:-0.3506655em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8506654999999999em;\"><span style=\"top:-3.0093345em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3506655em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n",
            "tags": [
                "计算机科学",
                "数据结构笔记",
                "数据结构",
                "算法",
                "复杂度"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%831%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/",
            "url": "https://www.starlinglin.com/computer-science/data-structure-note/%E6%A4%8B%E9%B8%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%20%EF%BC%831%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/",
            "title": "椋鸟数据结构笔记#1：数据结构、顺序表",
            "date_published": "2024-03-14T15:47:13.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h4>\n<p>数据结构，顾名思义，就是<strong>计算机存储和管理数据的方式</strong>，是存在一种或多种关系的数据的集合。数据结构和算法都是程序设计的重要部分。比方说，数组就是一种最基础数据结构。</p>\n<h4 id=\"线性表\"><a class=\"anchor\" href=\"#线性表\">#</a> 线性表</h4>\n<p>线性表是一类数据结构，其特点是 “<strong>逻辑线性</strong>”，也就是说里面的数据在逻辑上是按一定顺序先后排成一列的，不会有一些分叉什么的。当然，在<strong>逻辑上是线性的不代表其在物理结构（在内存中的实际分布结构）上也是线性的</strong>，可以每一个数据存在各自的位置，只要有办法能找到其逻辑相邻的数据就行。常见的线性表有：顺序表、链表、栈、队列、字符串等等。</p>\n<h4 id=\"顺序表seqlist简写-sl\"><a class=\"anchor\" href=\"#顺序表seqlist简写-sl\">#</a> 顺序表（SeqList，简写 SL）</h4>\n<p>顺序表是线性表的一种，是一种<strong>基于数组</strong>的数据结构。但是其实质是对数组的封装，实现对其增删改查等操作的接口。</p>\n<p>一般来说，实现顺序表我们会定义一个结构体，其成员为<strong>存放数据的数组和一个存放目前数据总量的整型常量</strong>。</p>\n<h5 id=\"静态顺序表\"><a class=\"anchor\" href=\"#静态顺序表\">#</a> 静态顺序表</h5>\n<p>静态顺序表使用定长数组管理数据，由于其空间的固定性，我们一般不会使用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    SLDataType data<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SL<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"动态顺序表\"><a class=\"anchor\" href=\"#动态顺序表\">#</a> 动态顺序表</h5>\n<p>动态顺序表则为数组动态分配空间，按需申请所需空间，较为<strong>灵活</strong>。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    SLDataType<span class=\"token operator\">*</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SL<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中，<strong>为指针 data 动态开辟空间模拟数组用于保存数据；size 用于保存已有数据个数；capacity 则用于保存目前动态开辟的空间大小</strong>。</p>\n<h5 id=\"动态顺序表的实现\"><a class=\"anchor\" href=\"#动态顺序表的实现\">#</a> 动态顺序表的实现</h5>\n<h6 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h6>\n<p>下面是定义动态顺序表和声明其常用函数的头文件：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>SeqList.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义顺序表结构、要实现的接口 / 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> SLDataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 静态顺序表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//#define N 100</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//struct SeqList</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//\tSLDataType arr[N];</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//\tint size;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 动态顺序表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SeqList</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tSLDataType<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 记录顺序表空间大小</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 记录顺序表当前有效数据个数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 初始化与销毁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLInit</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLDestory</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 打印顺序表</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPrint</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 扩容顺序表</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLCheckCapacity</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 头部 / 尾部插入与删除</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 头部插入</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPushBack</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 头部删除</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPopBack</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 尾部插入</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPushFront</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 尾部删除</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPopFront</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 任意位置插入与删除</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 任意位置插入</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLInsert</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 任意位置删除</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLRemove</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 查找某个元素对应的下标</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">SLFind</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 查找某个下标对应的元素</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>SLDataType <span class=\"token function\">SLFindByPos</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 修改某个下标对应的元素</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLModifyByPos</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 根据下标交换两个元素</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLSwapByPos</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"源文件\"><a class=\"anchor\" href=\"#源文件\">#</a> 源文件</h6>\n<p>下面是实现这些接口的源文件：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>SeqList.c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 实现定义的接口 / 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SeqList.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 初始化与销毁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLInit</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLDestory</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 打印顺序表</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPrint</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 扩容顺序表</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLCheckCapacity</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 空间不够，扩容</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-></span>capacity <span class=\"token operator\">==</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> psl<span class=\"token operator\">-></span>capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tSLDataType<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SLDataType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SLDataType<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扩容失败，程序终止！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 扩容成功</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tpsl<span class=\"token operator\">-></span>arr <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tpsl<span class=\"token operator\">-></span>capacity <span class=\"token operator\">=</span> newCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 插入与删除</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 尾部插入</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPushBack</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 空间不够，扩容</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">SLCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token comment\">// 空间足够，插入</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>psl<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 尾部删除</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPopBack</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 顺序表为空，无法删除</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"顺序表为空，无法删除！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 顺序表不为空，删除</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token operator\">--</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 头部插入</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPushFront</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 空间不够，扩容</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token function\">SLCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// 空间足够，插入</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token operator\">++</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">// 头部删除</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLPopFront</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token comment\">// 顺序表为空，无法删除</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"顺序表为空，无法删除！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token comment\">// 顺序表不为空，删除</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token operator\">--</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre> </pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 任意位置插入与删除</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 任意位置插入</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLInsert</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token comment\">// 位置不合法，插入失败</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">></span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入位置不合法，插入失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token comment\">// 位置合法，插入</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token comment\">// 空间不够，扩容</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token function\">SLCheckCapacity</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token comment\">// 空间足够，插入</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> pos<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token operator\">++</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\">// 任意位置删除</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLRemove</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token comment\">// 位置不合法，删除失败</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除位置不合法，删除失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token comment\">// 位置合法，删除</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token operator\">--</span>psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre> </pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">// 查找</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token comment\">// 查找某个元素对应的下标</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">SLFind</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token comment\">// 查找某个下标对应的元素</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>SLDataType <span class=\"token function\">SLFindByPos</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token comment\">// 位置不合法，查找失败</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找位置不合法，查找失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token comment\">// 位置合法，查找</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t<span class=\"token keyword\">return</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre> </pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token comment\">// 修改某个下标对应的元素</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLModifyByPos</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> SLDataType x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t<span class=\"token comment\">// 位置不合法，修改失败</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos <span class=\"token operator\">>=</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改位置不合法，修改失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t<span class=\"token comment\">// 位置合法，修改</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre> </pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token comment\">// 根据下标交换两个元素</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SLSwapByPos</span><span class=\"token punctuation\">(</span>SL<span class=\"token operator\">*</span> psl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t<span class=\"token comment\">// 断言</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>psl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t<span class=\"token comment\">// 位置不合法，交换失败</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos1 <span class=\"token operator\">>=</span> psl<span class=\"token operator\">-></span>size <span class=\"token operator\">||</span> pos2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pos2 <span class=\"token operator\">>=</span> psl<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"交换位置不合法，交换失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token comment\">// 位置合法，交换</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\tSLDataType tmp <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> psl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\tpsl<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>pos2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中大部分的函数其实很简单很好理解，主要需要注意<strong>插入数据时需要判断插入数据时顺序表是否有足够的空间，如果没有则需要扩容</strong>。</p>\n<p>为了更高效，非 0 空间扩容时我们一般采取空间按比例重新分配的方法。“<strong>做乘法而不是做加法</strong>”。</p>\n",
            "tags": [
                "计算机科学",
                "数据结构笔记",
                "数据结构",
                "顺序表",
                "数组"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8337%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8337%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/",
            "title": "椋鸟C语言笔记#37：预处理指令",
            "date_published": "2024-01-31T04:05:01.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<p>预处理指令就是 C 语言中的一些特定格式的用于辅助编译器预处理的指令，这些指令在编译时的预处理阶段就被处理，并不会被保留到汇编文件中。</p>\n<h4 id=\"预定义符号\"><a class=\"anchor\" href=\"#预定义符号\">#</a> 预定义符号</h4>\n<p>首先是一些内置的预定义符号，这些符号可以直接使用，在<strong>预处理阶段就被替换</strong>为对应的其他内容</p>\n<p>包括（注意前后都是两个下划线）：</p>\n<ul>\n<li><strong><strong>FILE</strong></strong>：替换为源文件的文件名（包括地址与后缀）</li>\n<li><strong><strong>LINE</strong></strong>：替换为文件中此符号所在行的行号</li>\n<li><strong><strong>DATE</strong></strong>：替换为文件被编译的日期</li>\n<li><strong><strong>TIME</strong></strong>：替换为文件被编辑的时间</li>\n<li><strong><strong>STDC</strong></strong>：如果编译器遵循 ANSI C 标准，这将被替换为 1，否则未定义</li>\n</ul>\n<h4 id=\"预处理指令-define\"><a class=\"anchor\" href=\"#预处理指令-define\">#</a> 预处理指令 #define</h4>\n<h5 id=\"define-定义的宏常量\"><a class=\"anchor\" href=\"#define-定义的宏常量\">#</a> #define 定义的宏常量</h5>\n<p>#define 可以在预处理时把程序中的某个字段<strong>直接替换</strong>为另一个字段，然后在继续编译</p>\n<p>注意：</p>\n<ul>\n<li><strong>#define 之间可以嵌套</strong></li>\n<li><strong>#define 的第一个字段（被替换字段）必须全连续（不能存在空白字符），而第二个字段可以存在空白字符甚至多行字符（需要续行符辅助）</strong></li>\n<li><strong>#define 的定义不能产生循环</strong></li>\n</ul>\n<p>使用示例如下（输出 100）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__p</span> <span class=\"token expression\">printf</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PRINT</span> <span class=\"token expression\"><span class=\"token function\">__p</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"%d\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PRINT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注：如果不写替换字段，则默认替换为 1</p>\n<h5 id=\"使用续行符扩展-define-的功能\"><a class=\"anchor\" href=\"#使用续行符扩展-define-的功能\">#</a> 使用续行符扩展 #define 的功能</h5>\n<p>上面提到可以使用续行符来完成多行的替换，具体怎么操作呢？</p>\n<p>其实很简单，只要正常分行，前面每一行的结尾都加上一个反斜杠即可（<strong>反斜杠后就是换行符，之间不能再有任何其他字符！！！</strong>），比方说：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_PRINT</span> <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"file:%s\\nline:%d\\ndate:%s\\ntime:%s\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token expression\"><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                            <span class=\"token expression\"><span class=\"token constant\">__DATE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__TIME__</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        <span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DEBUG_PRINT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"define-定义宏\"><a class=\"anchor\" href=\"#define-定义宏\">#</a> #define 定义宏</h5>\n<p>#define 指令还包含一个机制，就是宏定义功能</p>\n<p>宏定义可以理解为一种另类的 “函数”，可以进行<strong>多字段的替换</strong></p>\n<p>其声明方式为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">name</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>parament_list<span class=\"token punctuation\">)</span> stuff</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//name 是宏的名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//parament_list 是参数列表，类似于函数的参数列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//stuff 是替换内容</span></pre></td></tr></table></figure><p>其功能就是<strong>将 stuff 中所有的与参数列表相同的字段替换为我们使用时输入的字段</strong></p>\n<p>比方说下面就是定义了一个计算平方数的宏（<strong>注意这里后面替换字段打括号，不然替换后可能会有运算符顺序问题，再次声明宏是替换字符，不是算完给一个返回值</strong>）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQUARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SQUARE</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有人可能会认为宏没什么必要，函数能覆盖宏的功能，但其实不是这样。<strong>宏定义说到底还是字段的替换，是没有参数类型的说法的，参数不一定是有意义的变量</strong>，甚至可以是类型名、函数名乃至无意义的字符段。所以就衍生出许多有趣的用法，比方说我们平时大量使用动态内存分配时会觉得书写麻烦，就可以这样：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MALLOC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> TYPE<span class=\"token punctuation\">)</span> TYPE <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TYPE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">MALLOC</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">114514</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里宏的有一个参数就是类型名，显然函数是做不到的</p>\n<h5 id=\"使用宏时不要使用有副作用的参数\"><a class=\"anchor\" href=\"#使用宏时不要使用有副作用的参数\">#</a> 使用宏时不要使用有副作用的参数</h5>\n<p>带有副作用指参数表达式会影响某些变量的值，比方说自增自减表达式</p>\n<p>比方说下面这段程序的输出结果是：x=6 y=10 z=9</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=%d y=%d z=%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为什么呢，我们看看其预处理文件中的代码部分：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=%d y=%d z=%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说到底还是因为<strong>宏是字段替换而不是向函数那样创建栈帧空间有形参和返回的概念</strong></p>\n<h5 id=\"编译器到底是怎么处理宏的\"><a class=\"anchor\" href=\"#编译器到底是怎么处理宏的\">#</a> 编译器到底是怎么处理宏的</h5>\n<ol>\n<li>在调用宏时首先对参数进行检查，看看有没有由 #define 定义的符号，如果有那就先替换</li>\n<li>然后将替换字段插入到程序中原来字段的位置</li>\n<li>最后再一次对结果进行扫描，如果又有由 #define 定义的符号，那就返回第一步</li>\n</ol>\n<p><strong>注意：在扫描 #define 定义的符号时，字符串中的内容（双引号包起来的内容）会被跳过</strong></p>\n<h5 id=\"宏与函数的对比\"><a class=\"anchor\" href=\"#宏与函数的对比\">#</a> 宏与函数的对比</h5>\n<p>宏优势：</p>\n<ol>\n<li>一些简单的计算，比方说上面的取最大值的宏，使用宏拥有更高的运行效率</li>\n<li>宏的参数是靠字段替换存在的，所以能完成更多特殊的功能，比方说上面的 malloc</li>\n</ol>\n<p>宏劣势：</p>\n<ol>\n<li>宏可能会在预处理后大大加长代码长度</li>\n<li>宏无法被调试，出了问题不好找</li>\n<li>宏没有类型的概念，不够严谨，可能不利于代码的健壮性</li>\n<li>宏<strong>极容易造成运算符优先级的问题</strong>，在定义时需要小心加括号</li>\n<li>宏不能递归</li>\n</ol>\n<h5 id=\"约定俗成的命名规则\"><a class=\"anchor\" href=\"#约定俗成的命名规则\">#</a> 约定俗成的命名规则</h5>\n<p>为区分宏定义与函数的定义，<strong>一般默认宏名为全大写，而函数名不要全大写</strong></p>\n<h4 id=\"与-运算符\"><a class=\"anchor\" href=\"#与-运算符\">#</a> #与 ## 运算符</h4>\n<h5 id=\"运算符字符串化\"><a class=\"anchor\" href=\"#运算符字符串化\">#</a> #运算符（字符串化）</h5>\n<p>#运算符用于<strong>将宏的一个参数转换为字符串字面量</strong>，只能用在有参数的宏中。</p>\n<p>比方说下面是一个打印某变量值的宏定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"The value of \"</span><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">n</span><span class=\"token string\">\" is %d\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">PRINT</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里 #n 的 n 照样被替换为 a，随后字符串化使得这个 a 变成了字符串量，也就是说 PRINT (a); 会被预处理为如下一行代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of \"</span><span class=\"token string\">\"a\"</span><span class=\"token string\">\" is %d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//printf 的格式控制字符串其实是可以由多个字符串拼起来的，中间不要有逗号分割即可</span></pre></td></tr></table></figure><h5 id=\"运算符记号粘合\"><a class=\"anchor\" href=\"#运算符记号粘合\">#</a> ## 运算符（记号粘合）</h5>\n<h2 id=\"用于把位于其两侧的符号合成为一个符号以使某侧的符号被判定为-define-定义的标识符替换\"><a class=\"anchor\" href=\"#用于把位于其两侧的符号合成为一个符号以使某侧的符号被判定为-define-定义的标识符替换\">#</a> 用于把位于其两侧的符号合成为一个符号以使某侧的符号被判定为 #define 定义的标识符替换</h2>\n<p><strong>比方说，我们用定义把 A 替换为 B，然后下面有一个 AC，这时如果什么都不管，AC 还是 AC（AC 整体间没有空白字符分割会被当成一整个符号）。这时我们就可以把 AC 写成 A##C，那么 A 和 C 这两个符号就会被编译器认为是两个符号，就会把 A 替换为 B，然后 B 与 C 粘合产生新符号 BC。</strong></p>\n<p>比如我们写一个生成取最大值函数的宏：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">GENERIC_MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>           </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token expression\">type type</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_max</span><span class=\"token punctuation\">(</span>type x<span class=\"token punctuation\">,</span> type y<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                               </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>       </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">GENERIC_MAX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">GENERIC_MAX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">int_max</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">float_max</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"undef-指令\"><a class=\"anchor\" href=\"#undef-指令\">#</a> #undef 指令</h4>\n<p>这条指令用于<strong>移除一条 #define 定义（就是说这条定义到此为止了，下面不要再换了）</strong></p>\n<p>比方说下面输出 0 1 0（只有第二个 A 在预处理时被替换为 1）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> A <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">A</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">A</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"命令行定义\"><a class=\"anchor\" href=\"#命令行定义\">#</a> 命令行定义</h4>\n<p>#define 的定义也可以在编译时添加，比方说：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"$\"></td><td><pre>gcc <span class=\"token parameter variable\">-D</span> <span class=\"token assign-left variable\">SIZE</span><span class=\"token operator\">=</span><span class=\"token number\">10</span> program.c</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>//Linux gcc环境下</pre></td></tr></table></figure><p>这条指令就是在编译时指定 #define SIZE 10</p>\n<h4 id=\"条件编译\"><a class=\"anchor\" href=\"#条件编译\">#</a> 条件编译</h4>\n<p>条件编译就和条件语句差不多，是<strong>判断条件然后选择是否编译某段语句或执行某段预处理指令</strong></p>\n<p>常见的条件编译指令有：</p>\n<ol>\n<li>如果常量表达式成立则编译中间的代码</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">常量表达式</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>比如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__DEBUG__</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">__DEBUG__</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>多分支条件编译</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">常量表达式</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">常量表达式</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">常量表达式</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">常量表达式</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>判断是否被定义</li>\n</ol>\n<p>下面两段含义相同，代表判断 symbol 是否被定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">symbol</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>下面两段含义相同，代表判断 symbol 是否未被定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">symbol</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>条件编译指令可以嵌套：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 嵌套</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">A</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">B</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A and B is defined.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"include-包含头文件\"><a class=\"anchor\" href=\"#include-包含头文件\">#</a> #include 包含头文件</h4>\n<p>#include 包含头文件相当于把对应的文件直接复制到 #include 所在的位置</p>\n<h5 id=\"包含库文件\"><a class=\"anchor\" href=\"#包含库文件\">#</a> 包含库文件</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 包含库文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;filename.h></span></span></pre></td></tr></table></figure><p>编译器将在标准路径下查找对应的头文件，如果找不到这报编译错误</p>\n<h5 id=\"包含本地头文件\"><a class=\"anchor\" href=\"#包含本地头文件\">#</a> 包含本地头文件</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 包含本地头文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"filename.h\"</span></span></pre></td></tr></table></figure><p>编译器首先在源文件所在目录下查找，如果没找到则去标准路径继续查找，找不到则报编译错误</p>\n<p><strong>包含库文件也可以使用双引号，但是运行效率低且不易区分头文件，是不好的习惯</strong></p>\n<h5 id=\"标准路径\"><a class=\"anchor\" href=\"#标准路径\">#</a> 标准路径</h5>\n<p>Linux gcc 下：/usr/include</p>\n<h5 id=\"嵌套文件包含\"><a class=\"anchor\" href=\"#嵌套文件包含\">#</a> 嵌套文件包含</h5>\n<p>由于头文件中可能还包含了其他的头文件，有时部分头文件可能被包含多次，这会给编译器带来不必要的压力。如果是一个特大工程，这甚至会造成以小时甚至天计算的时间损失。</p>\n<p>所以我们有两个解决方案：</p>\n<ol>\n<li>条件编译</li>\n</ol>\n<p>比如头文件 test.h，我们把头文件内容写在如下代码中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__TEST_H__</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__TEST_H__</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">// 头文件的内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>    <span class=\"token comment\">//__TEST_H__</span></span></pre></td></tr></table></figure><p>这样这个头文件就最多只会被包含一次了</p>\n<ol start=\"2\">\n<li>使用 #pragma 指令</li>\n</ol>\n<p>只要在头文件前加一行指令即可确保次头文件只被包含一次：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 一些老版本的编译器不支持</span></pre></td></tr></table></figure><h4 id=\"其他预处理指令\"><a class=\"anchor\" href=\"#其他预处理指令\">#</a> 其他预处理指令</h4>\n<p>不常用，不介绍</p>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "预处理",
                "宏"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8336%EF%BC%9A%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%90%E8%A1%8C/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8336%EF%BC%9A%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%90%E8%A1%8C/",
            "title": "椋鸟C语言笔记#36：从源代码到运行",
            "date_published": "2024-01-20T15:07:56.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h3 id=\"从源代码到运行\"><a class=\"anchor\" href=\"#从源代码到运行\">#</a> 从源代码到运行</h3>\n<p>在 ANSI C 的标准中，源代码先经过<strong>翻译环境</strong>生成可执行程序，再于<strong>运行环境</strong>中执行</p>\n<h4 id=\"翻译环境\"><a class=\"anchor\" href=\"#翻译环境\">#</a> 翻译环境</h4>\n<p>翻译环境由<strong>编译</strong>与<strong>链接</strong>两个过程组成</p>\n<p>一个 C 语言项目可能存在多个. c 文件，在<strong>编译的过程</strong>中，编译器处理每个. c 文件产生对应的目标文件（在 Windows 下目标文件后缀默认为. obj，Linux 下默认为. o）</p>\n<p>在<strong>链接的过程</strong>中，多个目标文件和链接库一起经过链接器最终生成一个可执行程序文件</p>\n<h5 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h5>\n<p>编译的过程又分为三个部分：<strong>预处理</strong>、<strong>编译</strong>、<strong>汇编</strong></p>\n<p>以 Linux 系统为例，每个. c 为后缀的文件和其所包含的头文件预处理后变成. i 为后缀的预处理源码文件，在经过编译成为. s 为后缀的汇编源码文件，最后在汇编的过程产生. o 为后缀的二进制目标文件</p>\n<h6 id=\"预处理\"><a class=\"anchor\" href=\"#预处理\">#</a> 预处理</h6>\n<p>在 Linux gcc 环境下，我们通过如下指令生成 test.c 对应的预处理文件 test.i：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"$\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 所在路径</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"$\"></td><td><pre>gcc test.c <span class=\"token parameter variable\">-E</span> <span class=\"token parameter variable\">-o</span> test.i</pre></td></tr></table></figure><p><strong>预处理阶段主要是处理那些源文件中以 #开始的预编译指令，比如 #include、#define</strong></p>\n<p>处理的规则如下（具体的预处理指令含义下面讲，这里仅介绍规则）：</p>\n<ul>\n<li>删掉所有 #define，并展开所有宏定义</li>\n<li>处理条件编译指令，如：#if、#ifdef、#elif、#else、#endif</li>\n<li>处理 #include 预编译指令，把涉及到的头文件的内容插入过来</li>\n<li>删掉所有注释，替换成空格</li>\n<li>添加文件名和行号的标注，方便调试</li>\n</ul>\n<p>比方说某 test.c 文件如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> g_val <span class=\"token operator\">=</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"114514\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> g_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在本人安装 gcc13.1.0 的 Windows 的 WSL2 子系统 Ubuntu 20.04.6 LTS 中得到的 test.i 如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># <span class=\"token number\">0</span> <span class=\"token string\">\"test.c\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre># <span class=\"token number\">0</span> <span class=\"token string\">\"&lt;built-in>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre># <span class=\"token number\">0</span> <span class=\"token string\">\"&lt;命令行>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/stdc-predef.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre># <span class=\"token number\">0</span> <span class=\"token string\">\"&lt;命令行>\"</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"test.c\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre># <span class=\"token number\">27</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/libc-header-start.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre># <span class=\"token number\">33</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/libc-header-start.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/features.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre># <span class=\"token number\">461</span> <span class=\"token string\">\"/usr/include/features.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/sys/cdefs.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre># <span class=\"token number\">452</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/sys/cdefs.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/wordsize.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre># <span class=\"token number\">453</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/sys/cdefs.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/long-double.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre># <span class=\"token number\">454</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/sys/cdefs.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre># <span class=\"token number\">462</span> <span class=\"token string\">\"/usr/include/features.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre># <span class=\"token number\">485</span> <span class=\"token string\">\"/usr/include/features.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/gnu/stubs.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre># <span class=\"token number\">10</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/gnu/stubs.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/gnu/stubs-64.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre># <span class=\"token number\">11</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/gnu/stubs.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre># <span class=\"token number\">486</span> <span class=\"token string\">\"/usr/include/features.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre># <span class=\"token number\">34</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/libc-header-start.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre># <span class=\"token number\">28</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/local/lib/gcc/x86_64-pc-linux-gnu/13.1.0/include/stddef.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre># <span class=\"token number\">214</span> <span class=\"token string\">\"/usr/local/lib/gcc/x86_64-pc-linux-gnu/13.1.0/include/stddef.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre># <span class=\"token number\">214</span> <span class=\"token string\">\"/usr/local/lib/gcc/x86_64-pc-linux-gnu/13.1.0/include/stddef.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">size_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre># <span class=\"token number\">34</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/local/lib/gcc/x86_64-pc-linux-gnu/13.1.0/include/stdarg.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre># <span class=\"token number\">40</span> <span class=\"token string\">\"/usr/local/lib/gcc/x86_64-pc-linux-gnu/13.1.0/include/stdarg.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">typedef</span> __builtin_va_list __gnuc_va_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre># <span class=\"token number\">37</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre># <span class=\"token number\">27</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/wordsize.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre># <span class=\"token number\">28</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/timesize.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre># <span class=\"token number\">29</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre> </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> __u_char<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> __u_short<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __u_int<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __u_long<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> __int8_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> __uint8_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> __int16_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token keyword\">int</span> __uint16_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> __int32_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __uint32_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre> </pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __int64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __uint64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre> </pre></td></tr><tr><td data-num=\"74\"></td><td><pre> </pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">typedef</span> __int8_t __int_least8_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">typedef</span> __uint8_t __uint_least8_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">typedef</span> __int16_t __int_least16_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">typedef</span> __uint16_t __uint_least16_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">typedef</span> __int32_t __int_least32_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">typedef</span> __uint32_t __uint_least32_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">typedef</span> __int64_t __int_least64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">typedef</span> __uint64_t __uint_least64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre> </pre></td></tr><tr><td data-num=\"84\"></td><td><pre> </pre></td></tr><tr><td data-num=\"85\"></td><td><pre> </pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __quad_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __u_quad_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre> </pre></td></tr><tr><td data-num=\"89\"></td><td><pre> </pre></td></tr><tr><td data-num=\"90\"></td><td><pre> </pre></td></tr><tr><td data-num=\"91\"></td><td><pre> </pre></td></tr><tr><td data-num=\"92\"></td><td><pre> </pre></td></tr><tr><td data-num=\"93\"></td><td><pre> </pre></td></tr><tr><td data-num=\"94\"></td><td><pre> </pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __intmax_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __uintmax_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre># <span class=\"token number\">141</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/typesizes.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre># <span class=\"token number\">142</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/time64.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre># <span class=\"token number\">143</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre> </pre></td></tr><tr><td data-num=\"103\"></td><td><pre> </pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __dev_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __uid_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __gid_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __ino_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __ino64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __mode_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __nlink_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __off_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __off64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> __pid_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">int</span> __val<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> __fsid_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __clock_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __rlim_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __rlim64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __id_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __time_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __useconds_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __suseconds_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> __daddr_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> __key_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre> </pre></td></tr><tr><td data-num=\"126\"></td><td><pre> </pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> __clockid_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre> </pre></td></tr><tr><td data-num=\"129\"></td><td><pre> </pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> __timer_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre> </pre></td></tr><tr><td data-num=\"132\"></td><td><pre> </pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __blksize_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre> </pre></td></tr><tr><td data-num=\"135\"></td><td><pre> </pre></td></tr><tr><td data-num=\"136\"></td><td><pre> </pre></td></tr><tr><td data-num=\"137\"></td><td><pre> </pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __blkcnt_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __blkcnt64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre> </pre></td></tr><tr><td data-num=\"141\"></td><td><pre> </pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __fsblkcnt_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __fsblkcnt64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre> </pre></td></tr><tr><td data-num=\"145\"></td><td><pre> </pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __fsfilcnt_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __fsfilcnt64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre> </pre></td></tr><tr><td data-num=\"149\"></td><td><pre> </pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __fsword_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre> </pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __ssize_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre> </pre></td></tr><tr><td data-num=\"154\"></td><td><pre> </pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __syscall_slong_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre> </pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __syscall_ulong_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre> </pre></td></tr><tr><td data-num=\"159\"></td><td><pre> </pre></td></tr><tr><td data-num=\"160\"></td><td><pre> </pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token keyword\">typedef</span> __off64_t __loff_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__caddr_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre> </pre></td></tr><tr><td data-num=\"164\"></td><td><pre> </pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __intptr_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre> </pre></td></tr><tr><td data-num=\"167\"></td><td><pre> </pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __socklen_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre> </pre></td></tr><tr><td data-num=\"170\"></td><td><pre> </pre></td></tr><tr><td data-num=\"171\"></td><td><pre> </pre></td></tr><tr><td data-num=\"172\"></td><td><pre> </pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> __sig_atomic_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre># <span class=\"token number\">39</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre> </pre></td></tr><tr><td data-num=\"177\"></td><td><pre> </pre></td></tr><tr><td data-num=\"178\"></td><td><pre> </pre></td></tr><tr><td data-num=\"179\"></td><td><pre> </pre></td></tr><tr><td data-num=\"180\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre># <span class=\"token number\">13</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  <span class=\"token keyword\">int</span> __count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __wch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token keyword\">char</span> __wchb<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> __value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">&#125;</span> __mbstate_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre># <span class=\"token number\">6</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre> </pre></td></tr><tr><td data-num=\"193\"></td><td><pre> </pre></td></tr><tr><td data-num=\"194\"></td><td><pre> </pre></td></tr><tr><td data-num=\"195\"></td><td><pre> </pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_G_fpos_t</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  __off_t __pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>  __mbstate_t __state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token punctuation\">&#125;</span> __fpos_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre># <span class=\"token number\">40</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre># <span class=\"token number\">10</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_G_fpos64_t</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  __off64_t __pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  __mbstate_t __state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token punctuation\">&#125;</span> __fpos64_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre># <span class=\"token number\">41</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/__FILE.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre> </pre></td></tr><tr><td data-num=\"212\"></td><td><pre> </pre></td></tr><tr><td data-num=\"213\"></td><td><pre> </pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span> __FILE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre># <span class=\"token number\">42</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/FILE.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre> </pre></td></tr><tr><td data-num=\"219\"></td><td><pre> </pre></td></tr><tr><td data-num=\"220\"></td><td><pre> </pre></td></tr><tr><td data-num=\"221\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre> </pre></td></tr><tr><td data-num=\"223\"></td><td><pre> </pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span> FILE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre># <span class=\"token number\">43</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre># <span class=\"token number\">35</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_marker</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_codecvt</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_wide_data</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre> </pre></td></tr><tr><td data-num=\"233\"></td><td><pre> </pre></td></tr><tr><td data-num=\"234\"></td><td><pre> </pre></td></tr><tr><td data-num=\"235\"></td><td><pre> </pre></td></tr><tr><td data-num=\"236\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> _IO_lock_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre> </pre></td></tr><tr><td data-num=\"238\"></td><td><pre> </pre></td></tr><tr><td data-num=\"239\"></td><td><pre> </pre></td></tr><tr><td data-num=\"240\"></td><td><pre> </pre></td></tr><tr><td data-num=\"241\"></td><td><pre> </pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>  <span class=\"token keyword\">int</span> _flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre> </pre></td></tr><tr><td data-num=\"246\"></td><td><pre> </pre></td></tr><tr><td data-num=\"247\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_read_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_read_end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_read_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_write_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_write_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_write_end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_buf_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_buf_end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre> </pre></td></tr><tr><td data-num=\"256\"></td><td><pre> </pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_save_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_backup_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_IO_save_end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre> </pre></td></tr><tr><td data-num=\"261\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_marker</span> <span class=\"token operator\">*</span>_markers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre> </pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span> <span class=\"token operator\">*</span>_chain<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre> </pre></td></tr><tr><td data-num=\"265\"></td><td><pre>  <span class=\"token keyword\">int</span> _fileno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>  <span class=\"token keyword\">int</span> _flags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  __off_t _old_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre> </pre></td></tr><tr><td data-num=\"269\"></td><td><pre> </pre></td></tr><tr><td data-num=\"270\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> _cur_column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> _vtable_offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>  <span class=\"token keyword\">char</span> _shortbuf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre> </pre></td></tr><tr><td data-num=\"274\"></td><td><pre>  _IO_lock_t <span class=\"token operator\">*</span>_lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre> </pre></td></tr><tr><td data-num=\"276\"></td><td><pre> </pre></td></tr><tr><td data-num=\"277\"></td><td><pre> </pre></td></tr><tr><td data-num=\"278\"></td><td><pre> </pre></td></tr><tr><td data-num=\"279\"></td><td><pre> </pre></td></tr><tr><td data-num=\"280\"></td><td><pre> </pre></td></tr><tr><td data-num=\"281\"></td><td><pre> </pre></td></tr><tr><td data-num=\"282\"></td><td><pre>  __off64_t _offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre> </pre></td></tr><tr><td data-num=\"284\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_codecvt</span> <span class=\"token operator\">*</span>_codecvt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_wide_data</span> <span class=\"token operator\">*</span>_wide_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_FILE</span> <span class=\"token operator\">*</span>_freeres_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>_freeres_buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>  <span class=\"token class-name\">size_t</span> __pad5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>  <span class=\"token keyword\">int</span> _mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre> </pre></td></tr><tr><td data-num=\"291\"></td><td><pre>  <span class=\"token keyword\">char</span> _unused2<span class=\"token punctuation\">[</span><span class=\"token number\">15</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre># <span class=\"token number\">44</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre># <span class=\"token number\">52</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre><span class=\"token keyword\">typedef</span> __gnuc_va_list va_list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre># <span class=\"token number\">63</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre><span class=\"token keyword\">typedef</span> __off_t <span class=\"token class-name\">off_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre># <span class=\"token number\">77</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre><span class=\"token keyword\">typedef</span> __ssize_t <span class=\"token class-name\">ssize_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre> </pre></td></tr><tr><td data-num=\"301\"></td><td><pre> </pre></td></tr><tr><td data-num=\"302\"></td><td><pre> </pre></td></tr><tr><td data-num=\"303\"></td><td><pre> </pre></td></tr><tr><td data-num=\"304\"></td><td><pre> </pre></td></tr><tr><td data-num=\"305\"></td><td><pre> </pre></td></tr><tr><td data-num=\"306\"></td><td><pre><span class=\"token keyword\">typedef</span> __fpos_t <span class=\"token class-name\">fpos_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre># <span class=\"token number\">133</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/stdio_lim.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre># <span class=\"token number\">134</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre> </pre></td></tr><tr><td data-num=\"311\"></td><td><pre> </pre></td></tr><tr><td data-num=\"312\"></td><td><pre> </pre></td></tr><tr><td data-num=\"313\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre> </pre></td></tr><tr><td data-num=\"317\"></td><td><pre> </pre></td></tr><tr><td data-num=\"318\"></td><td><pre> </pre></td></tr><tr><td data-num=\"319\"></td><td><pre> </pre></td></tr><tr><td data-num=\"320\"></td><td><pre> </pre></td></tr><tr><td data-num=\"321\"></td><td><pre> </pre></td></tr><tr><td data-num=\"322\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">remove</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre> </pre></td></tr><tr><td data-num=\"324\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rename</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__old<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__new<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre> </pre></td></tr><tr><td data-num=\"326\"></td><td><pre> </pre></td></tr><tr><td data-num=\"327\"></td><td><pre> </pre></td></tr><tr><td data-num=\"328\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">renameat</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __oldfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__old<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __newfd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>       <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__new<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre># <span class=\"token number\">173</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">tmpfile</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre># <span class=\"token number\">187</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">tmpnam</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre> </pre></td></tr><tr><td data-num=\"335\"></td><td><pre> </pre></td></tr><tr><td data-num=\"336\"></td><td><pre> </pre></td></tr><tr><td data-num=\"337\"></td><td><pre> </pre></td></tr><tr><td data-num=\"338\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">tmpnam_r</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre># <span class=\"token number\">204</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">tempnam</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__pfx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__malloc__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre> </pre></td></tr><tr><td data-num=\"343\"></td><td><pre> </pre></td></tr><tr><td data-num=\"344\"></td><td><pre> </pre></td></tr><tr><td data-num=\"345\"></td><td><pre> </pre></td></tr><tr><td data-num=\"346\"></td><td><pre> </pre></td></tr><tr><td data-num=\"347\"></td><td><pre> </pre></td></tr><tr><td data-num=\"348\"></td><td><pre> </pre></td></tr><tr><td data-num=\"349\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fclose</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre> </pre></td></tr><tr><td data-num=\"351\"></td><td><pre> </pre></td></tr><tr><td data-num=\"352\"></td><td><pre> </pre></td></tr><tr><td data-num=\"353\"></td><td><pre> </pre></td></tr><tr><td data-num=\"354\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fflush</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre># <span class=\"token number\">227</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fflush_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre># <span class=\"token number\">246</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">fopen</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __filename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __modes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre> </pre></td></tr><tr><td data-num=\"361\"></td><td><pre> </pre></td></tr><tr><td data-num=\"362\"></td><td><pre> </pre></td></tr><tr><td data-num=\"363\"></td><td><pre> </pre></td></tr><tr><td data-num=\"364\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">freopen</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __filename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __modes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>        FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre># <span class=\"token number\">279</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">fdopen</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__modes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre># <span class=\"token number\">292</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">fmemopen</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__modes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>  <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre> </pre></td></tr><tr><td data-num=\"373\"></td><td><pre> </pre></td></tr><tr><td data-num=\"374\"></td><td><pre> </pre></td></tr><tr><td data-num=\"375\"></td><td><pre> </pre></td></tr><tr><td data-num=\"376\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">open_memstream</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>__bufloc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> <span class=\"token operator\">*</span>__sizeloc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre> </pre></td></tr><tr><td data-num=\"378\"></td><td><pre> </pre></td></tr><tr><td data-num=\"379\"></td><td><pre> </pre></td></tr><tr><td data-num=\"380\"></td><td><pre> </pre></td></tr><tr><td data-num=\"381\"></td><td><pre> </pre></td></tr><tr><td data-num=\"382\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setbuf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __buf<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre> </pre></td></tr><tr><td data-num=\"384\"></td><td><pre> </pre></td></tr><tr><td data-num=\"385\"></td><td><pre> </pre></td></tr><tr><td data-num=\"386\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">setvbuf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>      <span class=\"token keyword\">int</span> __modes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre> </pre></td></tr><tr><td data-num=\"389\"></td><td><pre> </pre></td></tr><tr><td data-num=\"390\"></td><td><pre> </pre></td></tr><tr><td data-num=\"391\"></td><td><pre> </pre></td></tr><tr><td data-num=\"392\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setbuffer</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>         <span class=\"token class-name\">size_t</span> __size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre> </pre></td></tr><tr><td data-num=\"395\"></td><td><pre> </pre></td></tr><tr><td data-num=\"396\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setlinebuf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre> </pre></td></tr><tr><td data-num=\"398\"></td><td><pre> </pre></td></tr><tr><td data-num=\"399\"></td><td><pre> </pre></td></tr><tr><td data-num=\"400\"></td><td><pre> </pre></td></tr><tr><td data-num=\"401\"></td><td><pre> </pre></td></tr><tr><td data-num=\"402\"></td><td><pre> </pre></td></tr><tr><td data-num=\"403\"></td><td><pre> </pre></td></tr><tr><td data-num=\"404\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fprintf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre> </pre></td></tr><tr><td data-num=\"407\"></td><td><pre> </pre></td></tr><tr><td data-num=\"408\"></td><td><pre> </pre></td></tr><tr><td data-num=\"409\"></td><td><pre> </pre></td></tr><tr><td data-num=\"410\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre> </pre></td></tr><tr><td data-num=\"412\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre> </pre></td></tr><tr><td data-num=\"415\"></td><td><pre> </pre></td></tr><tr><td data-num=\"416\"></td><td><pre> </pre></td></tr><tr><td data-num=\"417\"></td><td><pre> </pre></td></tr><tr><td data-num=\"418\"></td><td><pre> </pre></td></tr><tr><td data-num=\"419\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vfprintf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre>       __gnuc_va_list __arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"421\"></td><td><pre> </pre></td></tr><tr><td data-num=\"422\"></td><td><pre> </pre></td></tr><tr><td data-num=\"423\"></td><td><pre> </pre></td></tr><tr><td data-num=\"424\"></td><td><pre> </pre></td></tr><tr><td data-num=\"425\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre> </pre></td></tr><tr><td data-num=\"427\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vsprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>       __gnuc_va_list __arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre> </pre></td></tr><tr><td data-num=\"430\"></td><td><pre> </pre></td></tr><tr><td data-num=\"431\"></td><td><pre> </pre></td></tr><tr><td data-num=\"432\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">snprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __maxlen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre>       <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__printf__<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre> </pre></td></tr><tr><td data-num=\"436\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vsnprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __maxlen<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__printf__<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre># <span class=\"token number\">379</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vdprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __fmt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>       __gnuc_va_list __arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__printf__<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dprintf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__printf__<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre> </pre></td></tr><tr><td data-num=\"446\"></td><td><pre> </pre></td></tr><tr><td data-num=\"447\"></td><td><pre> </pre></td></tr><tr><td data-num=\"448\"></td><td><pre> </pre></td></tr><tr><td data-num=\"449\"></td><td><pre> </pre></td></tr><tr><td data-num=\"450\"></td><td><pre> </pre></td></tr><tr><td data-num=\"451\"></td><td><pre> </pre></td></tr><tr><td data-num=\"452\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fscanf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>     <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre> </pre></td></tr><tr><td data-num=\"455\"></td><td><pre> </pre></td></tr><tr><td data-num=\"456\"></td><td><pre> </pre></td></tr><tr><td data-num=\"457\"></td><td><pre> </pre></td></tr><tr><td data-num=\"458\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre> </pre></td></tr><tr><td data-num=\"460\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sscanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>     <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre> </pre></td></tr><tr><td data-num=\"463\"></td><td><pre> </pre></td></tr><tr><td data-num=\"464\"></td><td><pre> </pre></td></tr><tr><td data-num=\"465\"></td><td><pre> </pre></td></tr><tr><td data-num=\"466\"></td><td><pre> </pre></td></tr><tr><td data-num=\"467\"></td><td><pre> </pre></td></tr><tr><td data-num=\"468\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fscanf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">__asm__</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token string\">\"__isoc99_fscanf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"469\"></td><td><pre> </pre></td></tr><tr><td data-num=\"470\"></td><td><pre>                               <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">scanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">__asm__</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token string\">\"__isoc99_scanf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"472\"></td><td><pre>                              <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"473\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sscanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">__asm__</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token string\">\"__isoc99_sscanf\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"474\"></td><td><pre> </pre></td></tr><tr><td data-num=\"475\"></td><td><pre>                      <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"476\"></td><td><pre># <span class=\"token number\">432</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"477\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vfscanf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"478\"></td><td><pre>      __gnuc_va_list __arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__scanf__<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"480\"></td><td><pre> </pre></td></tr><tr><td data-num=\"481\"></td><td><pre> </pre></td></tr><tr><td data-num=\"482\"></td><td><pre> </pre></td></tr><tr><td data-num=\"483\"></td><td><pre> </pre></td></tr><tr><td data-num=\"484\"></td><td><pre> </pre></td></tr><tr><td data-num=\"485\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vscanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__scanf__<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"487\"></td><td><pre> </pre></td></tr><tr><td data-num=\"488\"></td><td><pre> </pre></td></tr><tr><td data-num=\"489\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vsscanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"491\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__scanf__<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre> </pre></td></tr><tr><td data-num=\"493\"></td><td><pre> </pre></td></tr><tr><td data-num=\"494\"></td><td><pre> </pre></td></tr><tr><td data-num=\"495\"></td><td><pre> </pre></td></tr><tr><td data-num=\"496\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vfscanf</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span> <span class=\"token function\">__asm__</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token string\">\"__isoc99_vfscanf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre> </pre></td></tr><tr><td data-num=\"498\"></td><td><pre> </pre></td></tr><tr><td data-num=\"499\"></td><td><pre> </pre></td></tr><tr><td data-num=\"500\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__scanf__<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"501\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vscanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span> <span class=\"token function\">__asm__</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token string\">\"__isoc99_vscanf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"502\"></td><td><pre> </pre></td></tr><tr><td data-num=\"503\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__scanf__<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">vsscanf</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __format<span class=\"token punctuation\">,</span> __gnuc_va_list __arg<span class=\"token punctuation\">)</span> <span class=\"token function\">__asm__</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token string\">\"__isoc99_vsscanf\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"505\"></td><td><pre> </pre></td></tr><tr><td data-num=\"506\"></td><td><pre> </pre></td></tr><tr><td data-num=\"507\"></td><td><pre> </pre></td></tr><tr><td data-num=\"508\"></td><td><pre>     <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__format__</span> <span class=\"token punctuation\">(</span>__scanf__<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre># <span class=\"token number\">485</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fgetc</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"511\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getc</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre> </pre></td></tr><tr><td data-num=\"513\"></td><td><pre> </pre></td></tr><tr><td data-num=\"514\"></td><td><pre> </pre></td></tr><tr><td data-num=\"515\"></td><td><pre> </pre></td></tr><tr><td data-num=\"516\"></td><td><pre> </pre></td></tr><tr><td data-num=\"517\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getchar</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre> </pre></td></tr><tr><td data-num=\"519\"></td><td><pre> </pre></td></tr><tr><td data-num=\"520\"></td><td><pre> </pre></td></tr><tr><td data-num=\"521\"></td><td><pre> </pre></td></tr><tr><td data-num=\"522\"></td><td><pre> </pre></td></tr><tr><td data-num=\"523\"></td><td><pre> </pre></td></tr><tr><td data-num=\"524\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getc_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getchar_unlocked</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre># <span class=\"token number\">510</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fgetc_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"528\"></td><td><pre># <span class=\"token number\">521</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">putc</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"531\"></td><td><pre> </pre></td></tr><tr><td data-num=\"532\"></td><td><pre> </pre></td></tr><tr><td data-num=\"533\"></td><td><pre> </pre></td></tr><tr><td data-num=\"534\"></td><td><pre> </pre></td></tr><tr><td data-num=\"535\"></td><td><pre> </pre></td></tr><tr><td data-num=\"536\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">putchar</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre># <span class=\"token number\">537</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"538\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fputc_unlocked</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"539\"></td><td><pre> </pre></td></tr><tr><td data-num=\"540\"></td><td><pre> </pre></td></tr><tr><td data-num=\"541\"></td><td><pre> </pre></td></tr><tr><td data-num=\"542\"></td><td><pre> </pre></td></tr><tr><td data-num=\"543\"></td><td><pre> </pre></td></tr><tr><td data-num=\"544\"></td><td><pre> </pre></td></tr><tr><td data-num=\"545\"></td><td><pre> </pre></td></tr><tr><td data-num=\"546\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">putc_unlocked</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"547\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">putchar_unlocked</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"548\"></td><td><pre> </pre></td></tr><tr><td data-num=\"549\"></td><td><pre> </pre></td></tr><tr><td data-num=\"550\"></td><td><pre> </pre></td></tr><tr><td data-num=\"551\"></td><td><pre> </pre></td></tr><tr><td data-num=\"552\"></td><td><pre> </pre></td></tr><tr><td data-num=\"553\"></td><td><pre> </pre></td></tr><tr><td data-num=\"554\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getw</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"555\"></td><td><pre> </pre></td></tr><tr><td data-num=\"556\"></td><td><pre> </pre></td></tr><tr><td data-num=\"557\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">putw</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __w<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"558\"></td><td><pre> </pre></td></tr><tr><td data-num=\"559\"></td><td><pre> </pre></td></tr><tr><td data-num=\"560\"></td><td><pre> </pre></td></tr><tr><td data-num=\"561\"></td><td><pre> </pre></td></tr><tr><td data-num=\"562\"></td><td><pre> </pre></td></tr><tr><td data-num=\"563\"></td><td><pre> </pre></td></tr><tr><td data-num=\"564\"></td><td><pre> </pre></td></tr><tr><td data-num=\"565\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">fgets</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __n<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"566\"></td><td><pre>     <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"567\"></td><td><pre># <span class=\"token number\">603</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"568\"></td><td><pre><span class=\"token keyword\">extern</span> __ssize_t <span class=\"token function\">__getdelim</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>__restrict __lineptr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"569\"></td><td><pre>                             <span class=\"token class-name\">size_t</span> <span class=\"token operator\">*</span>__restrict __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __delimiter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"570\"></td><td><pre>                             FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"571\"></td><td><pre><span class=\"token keyword\">extern</span> __ssize_t <span class=\"token function\">getdelim</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>__restrict __lineptr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"572\"></td><td><pre>                           <span class=\"token class-name\">size_t</span> <span class=\"token operator\">*</span>__restrict __n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __delimiter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"573\"></td><td><pre>                           FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"574\"></td><td><pre> </pre></td></tr><tr><td data-num=\"575\"></td><td><pre> </pre></td></tr><tr><td data-num=\"576\"></td><td><pre> </pre></td></tr><tr><td data-num=\"577\"></td><td><pre> </pre></td></tr><tr><td data-num=\"578\"></td><td><pre> </pre></td></tr><tr><td data-num=\"579\"></td><td><pre> </pre></td></tr><tr><td data-num=\"580\"></td><td><pre> </pre></td></tr><tr><td data-num=\"581\"></td><td><pre><span class=\"token keyword\">extern</span> __ssize_t <span class=\"token function\">getline</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>__restrict __lineptr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>                          <span class=\"token class-name\">size_t</span> <span class=\"token operator\">*</span>__restrict __n<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre>                          FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"584\"></td><td><pre> </pre></td></tr><tr><td data-num=\"585\"></td><td><pre> </pre></td></tr><tr><td data-num=\"586\"></td><td><pre> </pre></td></tr><tr><td data-num=\"587\"></td><td><pre> </pre></td></tr><tr><td data-num=\"588\"></td><td><pre> </pre></td></tr><tr><td data-num=\"589\"></td><td><pre> </pre></td></tr><tr><td data-num=\"590\"></td><td><pre> </pre></td></tr><tr><td data-num=\"591\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fputs</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"592\"></td><td><pre> </pre></td></tr><tr><td data-num=\"593\"></td><td><pre> </pre></td></tr><tr><td data-num=\"594\"></td><td><pre> </pre></td></tr><tr><td data-num=\"595\"></td><td><pre> </pre></td></tr><tr><td data-num=\"596\"></td><td><pre> </pre></td></tr><tr><td data-num=\"597\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">puts</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre> </pre></td></tr><tr><td data-num=\"599\"></td><td><pre> </pre></td></tr><tr><td data-num=\"600\"></td><td><pre> </pre></td></tr><tr><td data-num=\"601\"></td><td><pre> </pre></td></tr><tr><td data-num=\"602\"></td><td><pre> </pre></td></tr><tr><td data-num=\"603\"></td><td><pre> </pre></td></tr><tr><td data-num=\"604\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ungetc</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> __c<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"605\"></td><td><pre> </pre></td></tr><tr><td data-num=\"606\"></td><td><pre> </pre></td></tr><tr><td data-num=\"607\"></td><td><pre> </pre></td></tr><tr><td data-num=\"608\"></td><td><pre> </pre></td></tr><tr><td data-num=\"609\"></td><td><pre> </pre></td></tr><tr><td data-num=\"610\"></td><td><pre> </pre></td></tr><tr><td data-num=\"611\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token class-name\">size_t</span> <span class=\"token function\">fread</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__restrict __ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"612\"></td><td><pre>       <span class=\"token class-name\">size_t</span> __n<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre> </pre></td></tr><tr><td data-num=\"614\"></td><td><pre> </pre></td></tr><tr><td data-num=\"615\"></td><td><pre> </pre></td></tr><tr><td data-num=\"616\"></td><td><pre> </pre></td></tr><tr><td data-num=\"617\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token class-name\">size_t</span> <span class=\"token function\">fwrite</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__restrict __ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"618\"></td><td><pre>        <span class=\"token class-name\">size_t</span> __n<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__restrict __s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"619\"></td><td><pre># <span class=\"token number\">673</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"620\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token class-name\">size_t</span> <span class=\"token function\">fread_unlocked</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__restrict __ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"621\"></td><td><pre>         <span class=\"token class-name\">size_t</span> __n<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"622\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token class-name\">size_t</span> <span class=\"token function\">fwrite_unlocked</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__restrict __ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> __size<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"623\"></td><td><pre>          <span class=\"token class-name\">size_t</span> __n<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"624\"></td><td><pre> </pre></td></tr><tr><td data-num=\"625\"></td><td><pre> </pre></td></tr><tr><td data-num=\"626\"></td><td><pre> </pre></td></tr><tr><td data-num=\"627\"></td><td><pre> </pre></td></tr><tr><td data-num=\"628\"></td><td><pre> </pre></td></tr><tr><td data-num=\"629\"></td><td><pre> </pre></td></tr><tr><td data-num=\"630\"></td><td><pre> </pre></td></tr><tr><td data-num=\"631\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fseek</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> __off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __whence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"632\"></td><td><pre> </pre></td></tr><tr><td data-num=\"633\"></td><td><pre> </pre></td></tr><tr><td data-num=\"634\"></td><td><pre> </pre></td></tr><tr><td data-num=\"635\"></td><td><pre> </pre></td></tr><tr><td data-num=\"636\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ftell</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"637\"></td><td><pre> </pre></td></tr><tr><td data-num=\"638\"></td><td><pre> </pre></td></tr><tr><td data-num=\"639\"></td><td><pre> </pre></td></tr><tr><td data-num=\"640\"></td><td><pre> </pre></td></tr><tr><td data-num=\"641\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rewind</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"642\"></td><td><pre># <span class=\"token number\">707</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fseeko</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">,</span> __off_t __off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __whence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"644\"></td><td><pre> </pre></td></tr><tr><td data-num=\"645\"></td><td><pre> </pre></td></tr><tr><td data-num=\"646\"></td><td><pre> </pre></td></tr><tr><td data-num=\"647\"></td><td><pre> </pre></td></tr><tr><td data-num=\"648\"></td><td><pre><span class=\"token keyword\">extern</span> __off_t <span class=\"token function\">ftello</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"649\"></td><td><pre># <span class=\"token number\">731</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"650\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fgetpos</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__restrict __stream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">fpos_t</span> <span class=\"token operator\">*</span>__restrict __pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"651\"></td><td><pre> </pre></td></tr><tr><td data-num=\"652\"></td><td><pre> </pre></td></tr><tr><td data-num=\"653\"></td><td><pre> </pre></td></tr><tr><td data-num=\"654\"></td><td><pre> </pre></td></tr><tr><td data-num=\"655\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fsetpos</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">fpos_t</span> <span class=\"token operator\">*</span>__pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"656\"></td><td><pre># <span class=\"token number\">757</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearerr</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"658\"></td><td><pre> </pre></td></tr><tr><td data-num=\"659\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">feof</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"660\"></td><td><pre> </pre></td></tr><tr><td data-num=\"661\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ferror</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"662\"></td><td><pre> </pre></td></tr><tr><td data-num=\"663\"></td><td><pre> </pre></td></tr><tr><td data-num=\"664\"></td><td><pre> </pre></td></tr><tr><td data-num=\"665\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearerr_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">feof_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"667\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ferror_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"668\"></td><td><pre> </pre></td></tr><tr><td data-num=\"669\"></td><td><pre> </pre></td></tr><tr><td data-num=\"670\"></td><td><pre> </pre></td></tr><tr><td data-num=\"671\"></td><td><pre> </pre></td></tr><tr><td data-num=\"672\"></td><td><pre> </pre></td></tr><tr><td data-num=\"673\"></td><td><pre> </pre></td></tr><tr><td data-num=\"674\"></td><td><pre> </pre></td></tr><tr><td data-num=\"675\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">perror</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"676\"></td><td><pre> </pre></td></tr><tr><td data-num=\"677\"></td><td><pre> </pre></td></tr><tr><td data-num=\"678\"></td><td><pre> </pre></td></tr><tr><td data-num=\"679\"></td><td><pre> </pre></td></tr><tr><td data-num=\"680\"></td><td><pre> </pre></td></tr><tr><td data-num=\"681\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/sys_errlist.h\"</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"682\"></td><td><pre># <span class=\"token number\">26</span> <span class=\"token string\">\"/usr/include/x86_64-linux-gnu/bits/sys_errlist.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"683\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> sys_nerr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"684\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> sys_errlist<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"685\"></td><td><pre># <span class=\"token number\">782</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"686\"></td><td><pre> </pre></td></tr><tr><td data-num=\"687\"></td><td><pre> </pre></td></tr><tr><td data-num=\"688\"></td><td><pre> </pre></td></tr><tr><td data-num=\"689\"></td><td><pre> </pre></td></tr><tr><td data-num=\"690\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fileno</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"691\"></td><td><pre> </pre></td></tr><tr><td data-num=\"692\"></td><td><pre> </pre></td></tr><tr><td data-num=\"693\"></td><td><pre> </pre></td></tr><tr><td data-num=\"694\"></td><td><pre> </pre></td></tr><tr><td data-num=\"695\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fileno_unlocked</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"696\"></td><td><pre># <span class=\"token number\">800</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"697\"></td><td><pre><span class=\"token keyword\">extern</span> FILE <span class=\"token operator\">*</span><span class=\"token function\">popen</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__command<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__modes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"698\"></td><td><pre> </pre></td></tr><tr><td data-num=\"699\"></td><td><pre> </pre></td></tr><tr><td data-num=\"700\"></td><td><pre> </pre></td></tr><tr><td data-num=\"701\"></td><td><pre> </pre></td></tr><tr><td data-num=\"702\"></td><td><pre> </pre></td></tr><tr><td data-num=\"703\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pclose</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"704\"></td><td><pre> </pre></td></tr><tr><td data-num=\"705\"></td><td><pre> </pre></td></tr><tr><td data-num=\"706\"></td><td><pre> </pre></td></tr><tr><td data-num=\"707\"></td><td><pre> </pre></td></tr><tr><td data-num=\"708\"></td><td><pre> </pre></td></tr><tr><td data-num=\"709\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ctermid</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>__s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"710\"></td><td><pre># <span class=\"token number\">840</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"711\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flockfile</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"712\"></td><td><pre> </pre></td></tr><tr><td data-num=\"713\"></td><td><pre> </pre></td></tr><tr><td data-num=\"714\"></td><td><pre> </pre></td></tr><tr><td data-num=\"715\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ftrylockfile</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"716\"></td><td><pre> </pre></td></tr><tr><td data-num=\"717\"></td><td><pre> </pre></td></tr><tr><td data-num=\"718\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">funlockfile</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>__stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__nothrow__ <span class=\"token punctuation\">,</span> __leaf__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"719\"></td><td><pre># <span class=\"token number\">858</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"720\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">__uflow</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"721\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">__overflow</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"722\"></td><td><pre># <span class=\"token number\">873</span> <span class=\"token string\">\"/usr/include/stdio.h\"</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"723\"></td><td><pre> </pre></td></tr><tr><td data-num=\"724\"></td><td><pre># <span class=\"token number\">2</span> <span class=\"token string\">\"test.c\"</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"725\"></td><td><pre> </pre></td></tr><tr><td data-num=\"726\"></td><td><pre> </pre></td></tr><tr><td data-num=\"727\"></td><td><pre># <span class=\"token number\">3</span> <span class=\"token string\">\"test.c\"</span></pre></td></tr><tr><td data-num=\"728\"></td><td><pre><span class=\"token keyword\">int</span> g_val <span class=\"token operator\">=</span> <span class=\"token number\">1919810</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"729\"></td><td><pre> </pre></td></tr><tr><td data-num=\"730\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"731\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"732\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"114514\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"733\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> g_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"734\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"735\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"编译-2\"><a class=\"anchor\" href=\"#编译-2\">#</a> 编译</h6>\n<p>在 Linux gcc 环境下，我们通过如下指令生成 test.i 对应的预处理文件 test.s：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"$\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 所在路径</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"$\"></td><td><pre>gcc <span class=\"token parameter variable\">-s</span> test.i <span class=\"token parameter variable\">-o</span> test.s</pre></td></tr></table></figure><p><strong>编译的过程就是将预处理后的文件进行一系列的：<strong><strong>词法分析</strong></strong>、<strong><strong>语法分析</strong></strong>、<strong><strong>语义分析</strong></strong>、优化，生成相应的汇编语言代码文件</strong></p>\n<ol>\n<li><strong>词法分析</strong>：源代码程序送入<strong>扫描器</strong>进行词法分析，把代码中的字符分割成一系列记号（关键字、标识符、字面量、特殊字符）</li>\n<li><strong>语法分析</strong>：接下来送入<strong>语法分析器</strong>，将词法分割出来的记号进行语法分析，产生语法树（以表达式为节点）</li>\n<li><strong>语义分析</strong>：最后由<strong>语义分析器</strong>完成语义分析，这是表达式层面的语义分析，这个阶段会报告错误的语法信息</li>\n</ol>\n<p>比方说上面的 test.i 在该环境下进一步编译得到的 test.s 为：</p>\n<figure class=\"highlight asm6502\"><figcaption data-lang=\"6502 Assembly\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.file\t<span class=\"token string\">\"test.c\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t.text</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t.globl\tg_val</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t.data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token directive property\">.align</span> <span class=\"token decimal-number number\">4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t.type\tg_val<span class=\"token punctuation\">,</span> @object</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t.size\tg_val<span class=\"token punctuation\">,</span> <span class=\"token decimal-number number\">4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>g_val<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t.long\t<span class=\"token decimal-number number\">1919810</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t.section\t.rodata</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.LC0<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t.string\t<span class=\"token string\">\"114514\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.LC1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t.string\t<span class=\"token string\">\"%d\\n\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t.text</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t.globl\tmain</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t.type\tmain<span class=\"token punctuation\">,</span> @function</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>main<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.LFB0<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t.cfi_startproc</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tpushq\t%rbp</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token directive property\">.cfi_def_cfa_offset</span> <span class=\"token decimal-number number\">16</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token directive property\">.cfi_offset</span> <span class=\"token decimal-number number\">6</span><span class=\"token punctuation\">,</span> -<span class=\"token decimal-number number\">16</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tmovq\t%rsp<span class=\"token punctuation\">,</span> %rbp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token directive property\">.cfi_def_cfa_register</span> <span class=\"token decimal-number number\">6</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tmovl\t$.LC0<span class=\"token punctuation\">,</span> %edi</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcall\tputs</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tmovl\tg_val<span class=\"token punctuation\">(</span>%rip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> %eax</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tmovl\t%eax<span class=\"token punctuation\">,</span> %esi</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tmovl\t$.LC1<span class=\"token punctuation\">,</span> %edi</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tmovl\t<span class=\"token hex-number number\">$0</span><span class=\"token punctuation\">,</span> %eax</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcall\tprintf</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tmovl\t<span class=\"token hex-number number\">$0</span><span class=\"token punctuation\">,</span> %eax</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tpopq\t%rbp</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token directive property\">.cfi_def_cfa</span> <span class=\"token decimal-number number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token decimal-number number\">8</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t.cfi_endproc</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.LFE0<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t.size\tmain<span class=\"token punctuation\">,</span> .-main</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t.ident\t<span class=\"token string\">\"GCC: (GNU) 13.1.0\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t.section\t.note.GNU-stack<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>@progbits</pre></td></tr></table></figure><h6 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h6>\n<p>在 Linux gcc 环境下，我们通过如下指令生成 test.s 对应的目标文件 test.o：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"$\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 所在路径</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"$\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> test.s <span class=\"token parameter variable\">-o</span> test.o</pre></td></tr></table></figure><p>这一阶段，汇编器将汇编代码直接变成机器可执行的指令</p>\n<p>得到的 test.o 是一种<strong>二进制文件</strong></p>\n<h5 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h5>\n<p>链接用于解决一个项目中存在<strong>多个文件、多模块之间互相调用</strong>的问题</p>\n<p>链接是一个复杂的过程，涉及到地址和<strong>空间分配</strong>、<strong>符号决议</strong>、<strong>重定位</strong>等步骤</p>\n<p>比如我们在源文件 a 中调用源文件 b 的内容，在编译时这里的相关地址就会被搁置。在链接时，链接器根据引用的符号在其他模块中去寻找相关内容，然后将这些含引用的指令重新修正，让它们操作的地址为真正应该操作的地址。这就是<strong>重定位</strong>。</p>\n<p>其他的这里不多作介绍了（咱也不会）</p>\n<h4 id=\"运行环境\"><a class=\"anchor\" href=\"#运行环境\">#</a> 运行环境</h4>\n<p>首先程序必须被载入内存中。在有操作系统的环境下，这个操作一般就直接由操作系统完成；在独立环境中，程序的载入可能需要人工进行。</p>\n<p>随后程序开始执行，调用 main 函数，逐步执行程序代码。此时程序有一个运行时堆栈用于存储函数的局部变量和返回地址。同时程序可以使用静态内存。</p>\n<p>最后就是程序的终止，没什么好说的。</p>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "汇编",
                "预处理",
                "编译",
                "链接"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8335%EF%BC%9Ascanf_fscanf_sscanf%E3%80%81printf_fprintf_sprintf_snprintf%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AE%83%E4%BB%AC%E7%9A%84%E8%BE%B9%E7%95%8C%E6%A3%80%E6%9F%A5%E5%87%BD%E6%95%B0/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8335%EF%BC%9Ascanf_fscanf_sscanf%E3%80%81printf_fprintf_sprintf_snprintf%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AE%83%E4%BB%AC%E7%9A%84%E8%BE%B9%E7%95%8C%E6%A3%80%E6%9F%A5%E5%87%BD%E6%95%B0/",
            "title": "椋鸟C语言笔记#35：scanf/fscanf/sscanf、printf/fprintf/sprintf/snprintf，以及它们的边界检查函数",
            "date_published": "2024-01-19T22:10:55.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"scanffscanfsscanf\"><a class=\"anchor\" href=\"#scanffscanfsscanf\">#</a> scanf/fscanf/sscanf</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>这三个函数从各种资源读取数据，按照格式控制字符串（format）转译，并将结果存储到指定位置</strong></p>\n<p><strong>这三个函数返回成功赋值的接受参数的数量（可以为零），出错则返回 EOF。</strong></p>\n<p>他们的区别在于：</p>\n<ul>\n<li>scanf 从 stdin 读取数据。</li>\n<li>fscanf 从文件流 stream 读取数据。</li>\n<li>sscanf 从<strong>以 '\\0' 结尾</strong>的字符串 buffer 中读取数据  。</li>\n</ul>\n<p>scanf 和 fscanf 已经具体的讲过了</p>\n<p>sscanf 的特性与 fscanf 等同，<strong>抵达字符串尾（'\\0'）等价于 fscanf 抵达文件尾的条件</strong></p>\n<h5 id=\"sscanf-使用实例\"><a class=\"anchor\" href=\"#sscanf-使用实例\">#</a> sscanf 使用实例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 114514 afjoiweaj jiojl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d%s%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d - %s - %s\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"printffprintfsprintfsnprintf\"><a class=\"anchor\" href=\"#printffprintfsprintfsnprintf\">#</a> printf/fprintf/sprintf/snprintf</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufsz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>前三个函数从给定位置加载数据，按一定要求转换为字符串等价物，并写结果到各种地方</strong></p>\n<p><strong>第四个函数 snprintf 就是增加了长度限制的 sprintf，其他没有区别</strong></p>\n<p>对比四个函数：</p>\n<ul>\n<li>printf 直接写结果到 stdout。返回打印的字符数，出错返回一个负值。</li>\n<li>fprintf 写结果到流 stream。返回写入的字符数，出错返回一个负值。</li>\n<li>sprintf 写结果到字符串 buffer，<strong>结尾补上 '\\0'</strong>。返回写入的字符数（<strong>不包括空终止符 '\\0'</strong>），出错返回一个负值。</li>\n<li>snprintf 写结果到字符串 buffer，但是<strong>至多写 bufsz-1 个字符</strong>，结尾再加 '\\0'。<strong>返回忽略 bufsz 限制情况下本应写入的字符数</strong>，出错返回一个负值。如果 bufsz 为 0，则不写入任何内容；如果 buffer 是空指针，正常计算返回值但是不会真的写入内容。</li>\n</ul>\n<h5 id=\"sprintf-使用实例\"><a class=\"anchor\" href=\"#sprintf-使用实例\">#</a> sprintf 使用实例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1919810\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"114514\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"snprintf-使用实例\"><a class=\"anchor\" href=\"#snprintf-使用实例\">#</a> snprintf 使用实例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"scanf-系列的边界检查函数scanf_sfscanf_ssscanf_s\"><a class=\"anchor\" href=\"#scanf-系列的边界检查函数scanf_sfscanf_ssscanf_s\">#</a> scanf 系列的边界检查函数（scanf_s/fscanf_s/sscanf_s）</h4>\n<blockquote>\n<p><strong>首先声明一点，这些为了安全创造的带有下划线 s 结尾的边界检查函数是在 C11 标准中定义的<strong><strong>可选</strong></strong>函数，所以并不是每一个编译器都能编译这个函数，只有在使用的编译器实现定义 “<strong>STDC_LIB_EXT1</strong>” 而且在包含 &lt;stdio.h&gt; 前定义 “<strong>STDC_WANT_LIB_EXT1</strong>” 为整数常量 1 时才能保证这些函数一定可以使用。当然，不少编译器都默认开启了这些函数，比如在 Visual Studio 中这些函数就是默认开启的，甚至如果使用不安全的不带边界检查的这些函数还会警告并中断编译（在文件前定义 “_CRT_SECURE_NO_WARNINGS” 为整数常量 1 可以忽略不安全函数警告）</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 就是加上这一行以禁用不安全函数警告</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 后面的 1 可以省略，默认定义值为 1</span></pre></td></tr></table></figure></blockquote>\n<p>这些函数相比于传统函数，多了边界检查，可以防止缓冲区溢出</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fscanf_s</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sscanf_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>机制与传统函数相同，除了：</p>\n<p><strong>1.</strong> 如果在格式限定中使用了 % c 、 % s 或 %[，后面<strong>可变参数列表中与其对应的参数变成两个</strong>，第一个仍为传统函数的参数，第二个则是<strong>类型为 rsize_t</strong> 的一个值，用于限定这个格式匹配符最多能匹配多少个字节的内容。比方说：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">scanf_s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%x%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rsize_t</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">sizeof</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=%d m=%d arr=%s\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码中，scanf_s 中 % s 对应的参数包括 arr 和 (rsize_t) sizeof arr 两个 arr 是读取后保存的位置，后面则是限定最多读取 10 个字节（<strong>空终止符 '\\0' 是算在内的</strong>，所以实际最多读 9 个）</p>\n<p><strong>2.</strong> 在运行时额外检测以下违规行为，如果出现违规也返回 EOF：</p>\n<ul>\n<li>任何指针类型的参数是空指针</li>\n<li>format、stream、buffer 中存在空指针</li>\n<li>使用 % c 、 % s 或 %[ 会写入的字符数，加上空终止字符 '\\0'，要超过我们通过参数给定的限制</li>\n<li>可选的其他错误，因编译器而异</li>\n</ul>\n<h4 id=\"printf-系列的边界检查函数printf_sfprintf_ssprintf_ssnprintf_s\"><a class=\"anchor\" href=\"#printf-系列的边界检查函数printf_sfprintf_ssprintf_ssnprintf_s\">#</a> printf 系列的边界检查函数（printf_s/fprintf_s/sprintf_s/snprintf_s）</h4>\n<p>其使用条件与优越性与 scanf 系列的边界检查函数相同</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">printf_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fprintf_s</span><span class=\"token punctuation\">(</span>FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">rsize_t</span> bufsz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">snprintf_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">rsize_t</span> bufsz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其机制与传统函数相同，除了在运行时检测如下违规行为：</p>\n<ul>\n<li>format 中存在转换说明符 % n</li>\n<li>任何对应 % s 的参数是空指针</li>\n<li>format 或 buffer 是空指针</li>\n<li>bufsz 为 0 或大于其类型限制（RSIZE_MAX）</li>\n<li>出现编码错误</li>\n<li>（仅 sprintf_s）buffer 字符串长度（包括 '\\0'）超过 bufsz</li>\n</ul>\n<p>关于返回值：</p>\n<ul>\n<li>printf_s 与 fprintf_s 返回传输到输出流的字符数，若出现输出错误、运行时制约违规错误或编码错误则为一个负值。</li>\n<li>sprintf_s 返回写入到 buffer 的字符数，不计空终止字符，若在<strong>运行时违规返回零</strong>，若编码错误返回负值。</li>\n<li>snprintf_s 返回<strong>返回忽略 bufsz 限制情况下本应写入的字符数</strong>，不计空终止字符，若出现输出错误、运行时违规或编码错误则返回负值。</li>\n</ul>\n<h4 id=\"利用-snprintf-决定包含输出的缓冲区大小\"><a class=\"anchor\" href=\"#利用-snprintf-决定包含输出的缓冲区大小\">#</a> 利用 snprintf 决定包含输出的缓冲区大小</h4>\n<p>当我们不确定输出字符串的大小时，我们可以利用以零为 bufsz 和以空指针为 buffer 的 snprintf 来决定缓冲区大小。为什么呢？</p>\n<p>当 bufsz 为零、buffer 为空指针时，根据上面的介绍，我们知道这只会<strong>输出忽略 bufsz 限制情况下本应写入的字符数</strong>，而且不会产生其他影响。而这个输出值，不就是我们需要的缓冲区大小值吗？</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format <span class=\"token operator\">=</span> <span class=\"token string\">\"sqrt(2) = %f\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// +1 for '\\0'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> sz <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8334%EF%BC%9A%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99%E3%80%81%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%BB%93%E6%9D%9F%E6%88%96%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%88%A4%E5%AE%9A%E3%80%81%E7%BC%93%E5%86%B2%E5%8C%BA/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8334%EF%BC%9A%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99%E3%80%81%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%BB%93%E6%9D%9F%E6%88%96%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%88%A4%E5%AE%9A%E3%80%81%E7%BC%93%E5%86%B2%E5%8C%BA/",
            "title": "椋鸟C语言笔记#34：文件的随机读写、文件读取结束或失败的判定、缓冲区",
            "date_published": "2024-01-16T18:46:51.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"文件的随机读写\"><a class=\"anchor\" href=\"#文件的随机读写\">#</a> 文件的随机读写</h4>\n<p>文件的随机读写是指我们可以控制文件位置指示器（光标）的位置，以完成复杂的读写操作</p>\n<h5 id=\"fseek\"><a class=\"anchor\" href=\"#fseek\">#</a> fseek</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> origin <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fseek 函数用于<strong>移动文件位置指示器（光标）的位置</strong>，移<strong>动成功则返回 0，发生错误则光标位置不变、返回非 0 整数并设置流结构体上的错误指示器</strong>。</p>\n<p>其中，origin 是基准位置，可以取值有：<strong>SEEK_SET</strong>（文件头）、<strong>SEEK_CUR</strong>（当前光标位置）、<strong>SEEK_END</strong>（文件尾），一般这三个值分别是 0、1、2（最好不要这样写）。而 offset 为偏移的字节数，代表以 origin 为基准偏移特定字符，比方说 origin 为 SEEK_CUR 且 offset 为 - 1 时，就将光标左移一个字节。</p>\n<h5 id=\"使用实例\"><a class=\"anchor\" href=\"#使用实例\">#</a> 使用实例</h5>\n<p>文件被写入 “This is a sample.”</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tFILE<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fopen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an apple.\"</span><span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" sam\"</span><span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tpf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"ftell\"><a class=\"anchor\" href=\"#ftell\">#</a> ftell</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ftell 用于返回此时<strong>文件位置指示器相对文件头的偏移量</strong></p>\n<h5 id=\"使用实例-2\"><a class=\"anchor\" href=\"#使用实例-2\">#</a> 使用实例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tFILE<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fopen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1145141919810\"</span><span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_CUR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ftell</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"rewind\"><a class=\"anchor\" href=\"#rewind\">#</a> rewind</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rewind</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>rewind 函数用于将<strong>文件位置指示器返回到文件起始位置</strong></p>\n<p>效果等于 offset 为 0 且 origin 为 SEEK_SET 的 fseek 函数</p>\n<h4 id=\"文件读取结束或失败的判定\"><a class=\"anchor\" href=\"#文件读取结束或失败的判定\">#</a> 文件读取结束或失败的判定</h4>\n<h5 id=\"feof\"><a class=\"anchor\" href=\"#feof\">#</a> feof</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">feof</span><span class=\"token punctuation\">(</span> FILE <span class=\"token operator\">*</span>stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>feof 检查流结构体上的文件尾指示器，如果指示器被设置则返回非 0 值，否则返回 0</p>\n<p>feof 函数的作用是：<strong>当文件读取结束</strong>，判断结束的<strong>原因是否是 “遇到文件尾”</strong></p>\n<p><strong>请不要在读取过程中使用 feof 的返回值来判断文件是否读到结束</strong></p>\n<h5 id=\"ferror\"><a class=\"anchor\" href=\"#ferror\">#</a> ferror</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ferror 检查流结构体上的错误指示器，如果指示器被设置则返回非 0 值，否则返回 0</p>\n<h5 id=\"典型使用方式\"><a class=\"anchor\" href=\"#典型使用方式\">#</a> 典型使用方式</h5>\n<p><strong>先判断读取是否结束，如果读取结束则通过 feof 和 ferror 判断是遇到文件尾结束还是出错</strong></p>\n<ol>\n<li>判断文本文件是否结束：判断返回值是否为 EOF（fgetc）或者 NULL（fgets）</li>\n<li>判断二进制文件读取结束：判断 fread 返回值是否小于实际要读的个数</li>\n</ol>\n<p>比方说我们处理文本文件可以：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File opening failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意：int，非 char，要求处理 EOF</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 标准 C I/O 读取文件循环</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I/O error when reading.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End of file reached successfully.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>处理二进制文件可以：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> SIZE <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1.</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">double</span> b<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须用二进制模式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fopen-wb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写 double 的数组</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fopen-rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">size_t</span> ret_code <span class=\"token operator\">=</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读 double 的数组</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_code <span class=\"token operator\">==</span> SIZE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Array read successfully, contents: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> SIZE<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f \"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reading test.bin: unexpected end of file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error reading test.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// error handling</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"文件缓冲区\"><a class=\"anchor\" href=\"#文件缓冲区\">#</a> 文件缓冲区</h4>\n<p>ANSIC 标准采用 “<strong>文件缓冲系统</strong>” 来处理数据文件。</p>\n<p>也就是说，系统会在内存中为每个打开的文件流创建一个 “<strong>文件缓冲区</strong>”。内存中运行的程序如果想对外存中的文件进行 I/O（输入输出）操作，传递的信息就需要通过输入缓冲区和输出缓冲区。</p>\n<p><strong>在不刷新缓冲区的情况下，信息只有在填满整个输入 / 输出缓冲区后，整个缓冲区的信息才会整个打包发送给程序 / 文件，否则信息将滞留在缓冲区直到被刷新。</strong></p>\n<p><strong>刷新缓冲区是指将已经写到输入缓冲区的信息冲入、已经写到输出缓冲区的信息冲出；将尚未写入缓冲区的信息舍弃</strong></p>\n<blockquote>\n<p>由于缓冲区的存在，我们在更新模式（存在标签 &quot;+&quot;）下打开文件时：</p>\n<ul>\n<li>若中间没有 fflush 函数或文件定位函数，则输出后不应有输入</li>\n<li>若中间没有文件定位函数且输入操作没有遇到文件尾，则输入后不应有输出</li>\n</ul>\n</blockquote>\n<h5 id=\"fflush\"><a class=\"anchor\" href=\"#fflush\">#</a> fflush</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fflush 函数用于刷新缓冲区，成功返回 0，否则返回 EOF 并设置流结构体的错误指示器</p>\n<p>如果输入空指针，则刷新所有缓冲区</p>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数",
                "文件"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8333%EF%BC%9A%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%8C%87%E7%A4%BA%E5%99%A8%EF%BC%88%E5%85%89%E6%A0%87%EF%BC%89%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8333%EF%BC%9A%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E6%8C%87%E7%A4%BA%E5%99%A8%EF%BC%88%E5%85%89%E6%A0%87%EF%BC%89%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99/",
            "title": "椋鸟C语言笔记#33：文件位置指示器(光标)、文件的顺序读写",
            "date_published": "2024-01-13T13:56:41.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"光标文件位置指示器\"><a class=\"anchor\" href=\"#光标文件位置指示器\">#</a> 光标 (文件位置指示器)</h4>\n<p>我们平常打字的时候就知道光标这个概念，而程序在打开文件后也是有一个光标，用于控制文件的读写。我们一般说文件指针指向文件的哪个位置，其实就是光标 (文件位置指示器) 指向文件的某个位置，而这个信息也是保存在对应流的结构体中的。</p>\n<p><strong>读和写操作都是从光标的位置进行，而光标的位置也随着读写移动</strong></p>\n<h4 id=\"文件的顺序读写\"><a class=\"anchor\" href=\"#文件的顺序读写\">#</a> 文件的顺序读写</h4>\n<p>文件的顺序读写就是从光标的位置开始，按顺序向后读写内容</p>\n<p>文件顺序读写时我们没法随意控制光标的位置，只能让系统自己控制光标</p>\n<h5 id=\"fgetc\"><a class=\"anchor\" href=\"#fgetc\">#</a> fgetc</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fgetc 是字符输入函数，从指定的输入流读取下一个字符，并返回这个字符</p>\n<p><strong>如果读取失败则返回 EOF, 但是遇到文件尾导致的读取失败会设置流结构体上的文件尾指示器 (这是有用的，后面 feof 函数会讲), 而其他错误导致的失败会设置流结构体上的错误指示器 (这在 ferror 函数中用得到)</strong></p>\n<p>其实 getchar 其实就可以理解为 fgetc (stdin), 从标准流读一个字符</p>\n<p>但是注意：尽量使 <strong>stream 不要是一个带有副作用的表达式 (它被重复计算)</strong></p>\n<h6 id=\"使用实例\"><a class=\"anchor\" href=\"#使用实例\">#</a> 使用实例</h6>\n<p>其中的错误处理部分暂且不表，后面讲</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FILE<span class=\"token operator\">*</span> fp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File opening failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意:int, 非 char, 要求处理 EOF</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 标准 C I/O 读取文件循环</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I/O error when reading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End of file reached successfully\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    fp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"fputc\"><a class=\"anchor\" href=\"#fputc\">#</a> fputc</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fputc 是字符输出函数，向指定的输入流输出字符，并返回这个字符</p>\n<p><strong>如果输出失败则返回 EOF 并设置流结构体上的错误指示器</strong></p>\n<p>其实 putchar (ch) 其实就可以理解为 fputc (ch, stdin), 向标准流输出一个字符</p>\n<p>但是注意：尽量使 <strong>stream 不要是一个带有副作用的表达式 (它被重复计算)</strong></p>\n<h6 id=\"使用实例-2\"><a class=\"anchor\" href=\"#使用实例-2\">#</a> 使用实例</h6>\n<p>其中的错误处理部分暂且不表，后面讲</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> ret_code <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>ret_code <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ret_code <span class=\"token operator\">=</span> <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 测试是否抵达 EOF */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret_code <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ferror</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"putc()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"putc() failed in file %s at line # %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"fgets\"><a class=\"anchor\" href=\"#fgets\">#</a> fgets</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fgets 是文本行输入函数，从指定的输入流<strong>读取最多 count-1 个字符并将其存储在 str 所指向的字符数组 (以覆写的形式，不会清除原本内容)</strong>, 若是<strong>遇到文件尾或换行符则提前结束</strong>输入。如果是<strong>遇到换行符结束，那么 str 的结尾也将包含一个换行符</strong>；如果是遇到文件尾结束，那么 str 的结尾没有换行符。只要没有出错，读取的字符串结尾都会补上 '\\0'。</p>\n<ul>\n<li>如果读取成功，则返回值就是 str</li>\n<li>如果一个字符都没读取就直接遇到文件尾，则判定为失败，返回 NULL 且不会以 '\\0' 覆写 str 的首字节，同时设置流结构体的文件尾指示器</li>\n<li>如果遇到其他错误导致失败，则设置流结构体的错误指示器和 errno, 此时 str 数组会发生什么谁也不知道</li>\n</ul>\n<p><strong>count 小于等于 1 的情况是未定义的，不要这么做</strong></p>\n<h5 id=\"fputs\"><a class=\"anchor\" href=\"#fputs\">#</a> fputs</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fputs 是文本行输出函数，向指定的输出流 (stream)<strong> 输出以 '\\0' 结尾的字符串 str 的每一个字符</strong> (空字符不被写入)。如果输出成功，返回一个非负值 (<strong>未定义</strong>，有些编译器返回写入的字符数，有些返回最后一个字符); 如果输出失败，返回 EOF 并设置流结构体的错误指示器和 errno。</p>\n<p>fputs 与 puts 还有一个区别，puts 在输出后会再多输出一个换行符，fputs 不会</p>\n<h6 id=\"使用实例-3\"><a class=\"anchor\" href=\"#使用实例-3\">#</a> 使用实例</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fputs()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"fscanf\"><a class=\"anchor\" href=\"#fscanf\">#</a> fscanf</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fscanf 相比 scanf 除了可以选择从任意流 stream 输入外就没有什么区别了，都有被读字符串 **(应当以 '\\0' 结尾)** 和可变参数列表。<strong>返回值为成功接受参数的数量 (可以为 0)。</strong></p>\n<p>直接遇到文件尾或读取失败则返回 EOF, 并设置流结构体上相关指示器</p>\n<h5 id=\"fprintf\"><a class=\"anchor\" href=\"#fprintf\">#</a> fprintf</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fprintf 相比 printf 除了可以选择向任意流 stream 输出外就没有什么区别了，都有格式控制字符串和可变参数列表。<strong>返回值为输出到流的字符数，如果输出错误或者编码错误则返回一个负值 (未定义)。</strong></p>\n<h5 id=\"fread\"><a class=\"anchor\" href=\"#fread\">#</a> fread</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">,</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fread 是<strong>二进制</strong>输入函数，从指定流 stream 读取最多 count 个大小为 size 字节的对象到数组 buffer 中。<strong>读取成功则返回读取的对象数</strong>；读取<strong>出现错误或文件尾，返回值是小于 count 的未定义值</strong>并设置流结构体上相关指示器；<strong> 如果 size 或 count 是零则返回零且不进行其他动作。</strong></p>\n<blockquote>\n<p>官网上描述如下:</p>\n<p>如同转译每个对象为 unsigned char 数组，并对每个对象调用 size  次 fputc  以将那些 unsigned char 按顺序写入 stream  一般写入。文件位置指示器前进写入的字节数。</p>\n</blockquote>\n<h5 id=\"fwrite\"><a class=\"anchor\" href=\"#fwrite\">#</a> fwrite</h5>\n<p>fread 是<strong>二进制</strong>输出函数，从数组 buffer 向指定流 stream 输出最多 count 个大小为 size 字节的对象。<strong>输出成功则返回读取的对象数</strong>；输出<strong>出现错误，返回值是小于 count 的未定义值</strong>；<strong> 如果 size 或 count 是零则返回零且不进行其他动作。</strong></p>\n<blockquote>\n<p>官网上描述如下:</p>\n<p>如同转译每个对象为 unsigned char 数组，并对每个对象调用 size  次 fputc  以将那些 unsigned char 按顺序写入 stream  一般写入。文件位置指示器前进写入的字节数。</p>\n</blockquote>\n<h6 id=\"使用实例-4\"><a class=\"anchor\" href=\"#使用实例-4\">#</a> 使用实例</h6>\n<p>其中 fseek 函数用于移动光标，后面随机读写会讲</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99.9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tFILE<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dat.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fopen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">fseek</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %.1f\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tpf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数",
                "文件"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8332%EF%BC%9A%E6%96%87%E4%BB%B6%E3%80%81%E6%96%87%E4%BB%B6%E6%8C%87%E9%92%88%EF%BC%88%E6%B5%81%EF%BC%89%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%93%E5%BC%80%E4%B8%8E%E5%85%B3%E9%97%AD/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8332%EF%BC%9A%E6%96%87%E4%BB%B6%E3%80%81%E6%96%87%E4%BB%B6%E6%8C%87%E9%92%88%EF%BC%88%E6%B5%81%EF%BC%89%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%93%E5%BC%80%E4%B8%8E%E5%85%B3%E9%97%AD/",
            "title": "椋鸟C语言笔记#32：文件、文件指针（流）、文件的打开与关闭",
            "date_published": "2024-01-11T16:58:48.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"文件标识文件名\"><a class=\"anchor\" href=\"#文件标识文件名\">#</a> 文件标识（文件名）</h4>\n<p>每个文件都有一个唯一的文件标识，也就是文件名</p>\n<p>文件名包含 3 个部分：<strong>文件路径 + 文件名主干 + 文件后缀（可省略）</strong></p>\n<p>例如：C:\\Windows\\WindowsUpdate.log</p>\n<p><strong>我们常说的 “文件名” 是指文件名主干</strong></p>\n<h4 id=\"文件分类\"><a class=\"anchor\" href=\"#文件分类\">#</a> 文件分类</h4>\n<p>文件分为<strong>程序文件</strong>和<strong>数据文件</strong></p>\n<p>其中数据文件根据数据的组织形式分为<strong>文本文件</strong>和<strong>二进制文件</strong></p>\n<p>文本文件以 ASCII 字符的形式存储，二进制文件就是以二进制存储</p>\n<h4 id=\"流和标准流的基本概念\"><a class=\"anchor\" href=\"#流和标准流的基本概念\">#</a> 流和标准流的基本概念</h4>\n<h5 id=\"流\"><a class=\"anchor\" href=\"#流\">#</a> 流</h5>\n<p>程序往往需要输出到各种外部设备，也需要从外部设备获取数据。为了方便程序员对各种不同设备进行输入输出的调控，就抽象出了流的概念。流可以大概理解为<strong>数据传递的一个过程</strong></p>\n<p>一般情况下，程序想要输入或输出数据都要先打开对应设备的流，然后在操作</p>\n<p>那么为什么我们从键盘上输入数据，向控制台（屏幕）上输出数据时，不需要打开流呢？</p>\n<p>这就是因为 C 语言程序启动时就会默认打开 3 个流，我们称之为<strong>标准流</strong></p>\n<h5 id=\"标准流\"><a class=\"anchor\" href=\"#标准流\">#</a> 标准流</h5>\n<ul>\n<li>stdin：标准输入流，大多数环境从键盘输入，scanf 函数就是从 stdin 读取数据</li>\n<li>stdout：标准输出流，大多数环境输出到控制台，printf 函数就是输出数据到 stdout</li>\n<li>stderr：标准错误流，大多数环境输出到显示器界面</li>\n</ul>\n<p>这三个流默认打开，其类型为 <strong>FILE*</strong>，通常也称为<strong>文件指针</strong></p>\n<p>（为什么流会有类型呢？这就是下面要讲的重点了）</p>\n<p>在 C 语言中，我们通过文件指针来维护各种流的操作</p>\n<h4 id=\"文件指针c-语言中流的实质\"><a class=\"anchor\" href=\"#文件指针c-语言中流的实质\">#</a> 文件指针（C 语言中流的实质）</h4>\n<p>ANSIC 标准采用 “<strong>缓冲文件系统</strong>” 来处理各种数据文件，其中 “<strong>文件类型指针</strong>”（简称 “文件指针”）是一个非常重要的概念。</p>\n<p>每一个被使用的文件都会在内存中开辟一个相应的<strong>文件信息区</strong>，用于存放文件的相关信息（文件名主体、状态、路径等等），<strong>这些信息被保存在一个结构体变量中，而这个由系统声明的结构体类型就是 FILE</strong>，比方说某环境下 stdio.h 中就有这样的声明（不同环境下大同小异）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_iobuf</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span>   _cnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span>   _flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span>   _file<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span>   _charbuf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span>   _bufsiz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_tmpfname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_iobuf</span> FILE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>程序每当打开一个文件，系统就根据文件的情况创建一个 FILE 类型的结构体变量，并填充其中的信息。而<strong>一般我们使用一个 FILE * 类型的指针来维护这个 FILE 类型的结构体变量，而这就是我们实现程序与文件之间通讯的基础，也就是 C 语言中流的实质</strong></p>\n<p>文件指针变量可以指向某个文件的文件信息区（一个结构体变量），这样我们就可以通过文件信息区的信息访问和操作文件</p>\n<h4 id=\"文件的打开和关闭\"><a class=\"anchor\" href=\"#文件的打开和关闭\">#</a> 文件的打开和关闭</h4>\n<p>文件在<strong>读写前应该先打开，在使用结束后应该关闭</strong></p>\n<p>ANSIC 规定 fopen 函数用于打开文件，fclose 函数用来关闭文件，原型如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FILE<span class=\"token operator\">*</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> mode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span> FILE<span class=\"token operator\">*</span> stream <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"fclose\"><a class=\"anchor\" href=\"#fclose\">#</a> fclose</h5>\n<p>fclose 函数就是关闭 stream 指针指向的文件，<strong>成功则返回 0，失败则返回 EOF</strong></p>\n<blockquote>\n<p><strong>关闭文件的实质是：将已经写到输入缓冲区的信息冲入、已经写到输出缓冲区的信息冲出；将尚未写入缓冲区的信息舍弃；最后取消该文件指针与文件的关联</strong></p>\n<p>（前两步其实就是刷新缓冲区，缓冲区相关知识下面会讲）</p>\n</blockquote>\n<h5 id=\"fopen\"><a class=\"anchor\" href=\"#fopen\">#</a> fopen</h5>\n<p>fopen 函数就是以 mode 模式打开 filename 指向的文件，并返回一个指向该文件的 FILE * 指针</p>\n<p>如果打开文件失败则返回空指针 NULL 并设置对应的 errno</p>\n<p>filename 如果包含路径，则会寻找到对应的路径；如果不包含路径，就直接在本目录下（在 Windows 下表现为在本文件夹下）打开</p>\n<p>mode 称为<strong>文件访问模式字符串</strong>，其值与文件打开模式的对应关系如下：</p>\n<p>&lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;1&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th &gt; 文件访问模式字符串 &lt;/th&gt;&lt;th &gt; 含义 &lt;/th&gt;&lt;th &gt; 解释 &lt;/th&gt;&lt;th &gt; 若文件已存在 &lt;/th&gt;&lt;th &gt; 若文件不存在 &lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&quot;r&quot;&lt;/td&gt;&lt;td &gt; 只读 &lt;/td&gt;&lt;td &gt; 打开文件以读取 &lt;/td&gt;&lt;td &gt; 从头开始读 &lt;/td&gt;&lt;td &gt; 打开失败报错 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&quot;w&quot;&lt;/td&gt;&lt;td &gt; 只写 &lt;/td&gt;&lt;td &gt; 创建文件以写入 &lt;/td&gt;&lt;td &gt; 销毁内容重写 &lt;/td&gt;&lt;td &gt; 创建新文件 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&quot;a&quot;&lt;/td&gt;&lt;td &gt; 只后附 &lt;/td&gt;&lt;td &gt; 后附到文件 &lt;/td&gt;&lt;td &gt; 从结尾开始写 &lt;/td&gt;&lt;td &gt; 创建新文件 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&quot;r+&quot;&lt;/td&gt;&lt;td &gt; 读扩展 &lt;/td&gt;&lt;td &gt; 打开文件读写 &lt;/td&gt;&lt;td &gt; 从头开始读写 &lt;/td&gt;&lt;td &gt; 打开失败报错 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&quot;w+&quot;&lt;/td&gt;&lt;td &gt; 写扩展 &lt;/td&gt;&lt;td &gt; 创建文件读写 &lt;/td&gt;&lt;td &gt; 销毁内容重新读写 &lt;/td&gt;&lt;td &gt; 创建新文件 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&quot;a+&quot;&lt;/td&gt;&lt;td &gt; 后附扩展 &lt;/td&gt;&lt;td &gt; 打开文件读写 &lt;/td&gt;&lt;td&gt;&lt;p &gt; 从头开始读 &lt;/p&gt;&lt;p &gt; 从结尾开始写 &lt;/p&gt;&lt;/td&gt;&lt;td &gt; 创建新文件 &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt; 标签 b：在文件访问模式字符串后加一个 b 则代表以二进制模式进行（只有 Windows 下），b 是和 + 类似的后缀所以顺序不影响。比如说：&quot;wb+&quot; 和 &quot;w+b&quot; 都代表创建二进制文件读写，其行为与 &quot;w+&quot; 也是一样的。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt; 标签 t：其实如果没有特意去加标签 b，就默认后面有标签 t，代表以文本的模式进行。比方说 &quot;a+&quot; 其实就是 &quot;a+t&quot; 或者 &quot;at+&quot;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt; 后缀 x：在基于 &quot;w&quot; 的文件访问模式字符串的结尾加上 x 就代表如果文件已经存在的话，不再销毁内容重新写 / 读写，而是直接认为函数失败并返回 NULL&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</p>\n<p>注意：</p>\n<p>在更新模式（存在标签 &quot;+&quot;）下打开文件时：</p>\n<ul>\n<li>若中间没有 fflush 函数或文件定位函数，则输出后不应有输入</li>\n<li>若中间没有文件定位函数且输入操作没有遇到文件尾，则输入后不应有输出</li>\n</ul>\n<p>（这部分相关的内容后面讲，涉及到缓冲区、文件定位函数等知识。暂且先列在这里，原因后面缓冲区那里再说。）</p>\n<p><strong>文件打开的模式与其返回的文件指针的权限息息相关</strong>，比如 &quot;w&quot; 和 &quot;a&quot; 模式下文件指针是无效的；&quot;w+&quot; 和 &quot;a+&quot; 模式下文件指针只对读有效，如果写，文件指针就会自动移到文件尾</p>\n<h5 id=\"举个栗子\"><a class=\"anchor\" href=\"#举个栗子\">#</a> 举个栗子</h5>\n<p>下面就是在本目录下创建一个 abc.txt 并写入字母表的程序：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tFILE<span class=\"token operator\">*</span> pf <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span>fopen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "指针",
                "文件"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8331%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%88%E8%81%94%E5%90%88%E4%BD%93%EF%BC%89%E5%B5%8C%E5%A5%97%E3%80%81%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8331%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%88%E8%81%94%E5%90%88%E4%BD%93%EF%BC%89%E5%B5%8C%E5%A5%97%E3%80%81%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84/",
            "title": "椋鸟C语言笔记#31：结构体（联合体）嵌套、柔性数组",
            "date_published": "2024-01-11T12:24:40.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"结构体联合体嵌套\"><a class=\"anchor\" href=\"#结构体联合体嵌套\">#</a> 结构体（联合体）嵌套</h4>\n<p>结构体、联合体可以嵌套，也就是说结构体（联合体）的成员也可以是结构体（联合体）</p>\n<h5 id=\"嵌套时内嵌结构体联合体不创建变量匿名\"><a class=\"anchor\" href=\"#嵌套时内嵌结构体联合体不创建变量匿名\">#</a> 嵌套时内嵌结构体（联合体）不创建变量（匿名）</h5>\n<p>如果嵌套时内嵌结构体（联合体）不创建变量（匿名），<strong>内嵌结构体（联合体）的成员会被认为是外围结构体（联合体）的成员</strong>，如果外围结构体（联合体）也是匿名的，那么就递归应用此规则：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：<strong>此匿名非彼匿名，结构体类型依旧可以有名字，但是不能内嵌结构体只能有其声明部分而不能在后面加成员变量名</strong></p>\n<h5 id=\"嵌套时内嵌结构体联合体创建变量非匿名\"><a class=\"anchor\" href=\"#嵌套时内嵌结构体联合体创建变量非匿名\">#</a> 嵌套时内嵌结构体（联合体）创建变量（非匿名）</h5>\n<p>当嵌套时内嵌结构体（联合体）创建变量（非匿名），则需要通过访问操作符先访问这个内嵌结构体类型的成员，再访问其中的成员，如果外围结构体（联合体）也是非匿名结构体，那么就递归应用此规则：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">union</span> U1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">union</span> U2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> u2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> u1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">int</span> n5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span>u1<span class=\"token punctuation\">.</span>u2<span class=\"token punctuation\">.</span>n1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span>s2<span class=\"token punctuation\">.</span>u1<span class=\"token punctuation\">.</span>n3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同样的，这里的非匿名也与匿名结构体无关，结构体类型也可以没有命名，但是<strong>内嵌结构体后面应该加成员变量名</strong></p>\n<h5 id=\"嵌套初始化\"><a class=\"anchor\" href=\"#嵌套初始化\">#</a> 嵌套初始化</h5>\n<p>这边 C 官网上讲的足够清楚了，<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5jcHByZWZlcmVuY2UuY29tL3cvYy9sYW5ndWFnZS9zdHJ1Y3RfaW5pdGlhbGl6YXRpb24=\">链接在此</span></p>\n<h4 id=\"柔性数组\"><a class=\"anchor\" href=\"#柔性数组\">#</a> 柔性数组</h4>\n<p>在 C99 标准以后，结构体的最后一个成员被允许是一个未知大小的数组，这就叫柔性数组</p>\n<p>这个未知大小当然不是真的未知，而是 “可动态分配”</p>\n<p>比方说：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">long</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者写成：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">long</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特点：</p>\n<ul>\n<li>柔性数组<strong>成员前必须至少包含一个其他成员</strong></li>\n<li>用 sizeof 返回包含柔性数组的结构体的大小时，<strong>忽略柔性数组后正常计算</strong></li>\n<li>包含柔性数组的结构体不能作为数组成员或者其他结构体的成员</li>\n<li>如果创建包含柔性数组的结构体变量最好<strong>使用动态内存分配</strong>（见下）</li>\n</ul>\n<h5 id=\"柔性数组的使用\"><a class=\"anchor\" href=\"#柔性数组的使用\">#</a> 柔性数组的使用</h5>\n<p>如下便是给柔性数组分配了 40 个长整型的空间</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">long</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> stt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstt<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>stt<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">40</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc-p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tp<span class=\"token operator\">-></span>i <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tp<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%2ld\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "结构体",
                "内存",
                "柔性数组"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8330%EF%BC%9A%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88malloc%E3%80%81calloc%E3%80%81realloc%E3%80%81free%EF%BC%89%E3%80%81%E6%9F%A5%E8%AF%A2%E5%B7%B2%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%EF%BC%88_msize%E3%80%81malloc_usable_size%EF%BC%89/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8330%EF%BC%9A%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%88malloc%E3%80%81calloc%E3%80%81realloc%E3%80%81free%EF%BC%89%E3%80%81%E6%9F%A5%E8%AF%A2%E5%B7%B2%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%EF%BC%88_msize%E3%80%81malloc_usable_size%EF%BC%89/",
            "title": "椋鸟C语言笔记#30：动态内存管理（malloc、calloc、realloc、free）、查询已分配空间大小（_msize、malloc_usable_size）",
            "date_published": "2024-01-06T12:13:19.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"动态内存分配的意义\"><a class=\"anchor\" href=\"#动态内存分配的意义\">#</a> 动态内存分配的意义</h4>\n<p>直接创建变量、数组等只能在栈区空间开辟固定大小的一段空间</p>\n<p>而我们在实际使用时对空间的需求有时不会那么死板。比方说直接创建数组的话，其长度就固定了，不可调整 —— 如果我们需要数组的大小在程序运行时才会被确定就不行了</p>\n<p>所以 C 语言中有动态内存分配的方法，使我们能够在需要时灵活的自己申请和释放空间</p>\n<h4 id=\"mallocmemory-allocation\"><a class=\"anchor\" href=\"#mallocmemory-allocation\">#</a> malloc（memory allocation）</h4>\n<p>malloc 是一个开辟动态内存的函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>    <span class=\"token comment\">// 或者 malloc.h</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数将会向内存<strong>堆区</strong>申请一块大小为 size（单位：字节）的<strong>连续可用</strong>的空间，并且返回指向这块空间的 <strong>void*</strong> 类型指针，如果开辟空间<strong>失败，则返回 NULL 指针</strong></p>\n<ul>\n<li><strong>size 为 0 是未定义的行为，其结果取决于编译器</strong></li>\n<li><strong>由于开辟失败可能返回 NULL，因此 malloc 的返回值一定要检查</strong></li>\n</ul>\n<h4 id=\"free\"><a class=\"anchor\" href=\"#free\">#</a> free</h4>\n<p>与 malloc 相对，free 函数用来释放我们申请的动态内存空间：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>    <span class=\"token comment\">// 或者 malloc.h</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>memblock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>如果参数指向的内存块不是动态开辟的，那么 free 函数的行为就是未定义的</strong></li>\n<li><strong>如果参数是空指针，那么这条语句将会被忽略，什么都不会发生</strong></li>\n</ul>\n<h4 id=\"malloc-与-free-的使用示例\"><a class=\"anchor\" href=\"#malloc-与-free-的使用示例\">#</a> malloc 与 free 的使用示例</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 判断 ptr 指针是否为空</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：在使用 free 函数释放动态开辟的空间后，应<strong>及时将指向这篇空间的指针置为空指针</strong>（现在这些指针指向的空间是未申请的、非法的，容易造成野指针问题），这是一个良好的习惯</p>\n<h4 id=\"calloccontiguous-allocation\"><a class=\"anchor\" href=\"#calloccontiguous-allocation\">#</a> calloc（contiguous allocation）</h4>\n<p>C 语言中还有 calloc 函数，也是用来动态分配内存的：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>    <span class=\"token comment\">// 或者 malloc.h</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">size_t</span> num<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数的功能与 malloc 相似，在<strong>堆区</strong>动态开辟连续的 <strong>num 个大小为 size 字节</strong>的空间，但是这个函数<strong>会把开辟出来的空间全部初始化为 0</strong></p>\n<h5 id=\"使用示例\"><a class=\"anchor\" href=\"#使用示例\">#</a> 使用示例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"reallocre-allocation\"><a class=\"anchor\" href=\"#reallocre-allocation\">#</a> realloc（re-allocation）</h4>\n<p>有时我们要修改动态内存的大小，可以用 realloc <strong>重新分配</strong>动态内存空间：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>    <span class=\"token comment\">// 或者 malloc.h</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> new_size <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ptr 是要调整的内存的地址，new_size 是调整后的新大小，返回值是<strong>调整之后的内存起始位置</strong></p>\n<p>realloc <strong>扩展</strong>内存空间时有三种情况：</p>\n<ul>\n<li><strong>原有空间后有足够大的空间</strong>：直接在原处追加空间，原空间数据不变（追加空间未初始化）</li>\n<li><strong>原空间后空间不足以扩展</strong>：在堆区另外找一个合适大小的连续空间，将原空间数据复制过去（增加的空间未初始化），并将原空间释放</li>\n<li><strong>找不到足够的内存空间</strong>：不释放原有内存块，返回空指针</li>\n</ul>\n<p>realloc <strong>收缩</strong>内存空间时只有一种情况：将多余的部分释放</p>\n<p>若 ptr 是 NULL，则功能与 malloc 一致</p>\n<p>若 new_size 为 0，则行为未定义，避免这样做</p>\n<h5 id=\"使用示例-2\"><a class=\"anchor\" href=\"#使用示例-2\">#</a> 使用示例</h5>\n<p>由于 realloc 如果重分配失败会返回 NULL，如果我们要对 p 指针重分配，<strong>我们就不会直接拿 p 来接受 realloc 的返回值</strong>。因为如果返回 NULL，原空间不仅没有被释放，也没有指针指向原空间，就造成了<strong>内存泄露</strong>，所以我们可以这样：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"realloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tp <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tp <span class=\"token operator\">=</span> q <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"查询已分配空间大小\"><a class=\"anchor\" href=\"#查询已分配空间大小\">#</a> 查询已分配空间大小</h4>\n<p>如果我们有一片分配好的动态内存，想知道之前到底分配了多大的空间时，我们可以使用_msize（Windows）和 malloc_usable_size（Linux）函数来查询：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>    <span class=\"token comment\">// 或者 malloc.h</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">_msize</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>memblock <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">malloc_usable_size</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>_Nullable ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这两个函数都可以返回参数指针所对应的动态内存空间实际分配的大小</p>\n<p><strong>注意：这个值可能比我们开辟空间时预想的大小大（具体可以看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ1Nzc1Mzc0L2Fuc3dlci8yMTQ4MTk1NjQx\">这个</span>）</strong></p>\n<h4 id=\"动态内存分配常见错误\"><a class=\"anchor\" href=\"#动态内存分配常见错误\">#</a> 动态内存分配常见错误</h4>\n<h5 id=\"1-对潜在-null-指针的解引用\"><a class=\"anchor\" href=\"#1-对潜在-null-指针的解引用\">#</a> 1. 对潜在 NULL 指针的解引用</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 如果 p 的值是 NULL，就会有问题</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们试图给 p 分配 INT_MAX（limits.h 中定义的值，等于整型的最大值），这很有可能分配失败返回 NULL 指针，而下面对其解引用显然就是不安全的（编译器也会报警告的）</p>\n<p><strong>在动态分配内存后，一定要进行空指针判断</strong></p>\n<h5 id=\"2-对动态开辟空间的越界访问\"><a class=\"anchor\" href=\"#2-对动态开辟空间的越界访问\">#</a> 2. 对动态开辟空间的越界访问</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 当 i 是 10 的时候越界访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 <strong>exit 函数会直接终止程序并且返回其参数</strong></p>\n<p>而 EXIT_FAILURE 是定义在 stdlib.h 中的错误代码，表示程序未成功执行（一般值为 1）</p>\n<h5 id=\"3-对非动态开辟内存使用-free-释放\"><a class=\"anchor\" href=\"#3-对非动态开辟内存使用-free-释放\">#</a> 3. 对非动态开辟内存使用 free 释放</h5>\n<p>free 函数的参数除了 NULL 只能是动态开辟的内存</p>\n<h5 id=\"4-使用-free-函数释放动态内存的一部分\"><a class=\"anchor\" href=\"#4-使用-free-函数释放动态内存的一部分\">#</a> 4. 使用 free 函数释放动态内存的一部分</h5>\n<p>如果 free 函数的参数指向的不是动态内存的起始位置，也会报错</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//p 不再指向动态内存的起始位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"5-多次释放同一块内存\"><a class=\"anchor\" href=\"#5-多次释放同一块内存\">#</a> 5. 多次释放同一块内存</h5>\n<p>实际上就变成了对非动态开辟内存使用 free 释放</p>\n<h5 id=\"6-动态开辟内存后忘记释放\"><a class=\"anchor\" href=\"#6-动态开辟内存后忘记释放\">#</a> 6. 动态开辟内存后忘记释放</h5>\n<p>造成 “内存泄露”：通过某个地址申请了空间，结果不还，而这个地址可能之后找不到了。这会导致这一片开辟的内存再也无法使用，如果多次内存泄露累计起来后果很严重。</p>\n<p><strong>所以动态开辟的内存一定要释放</strong></p>\n<h5 id=\"使用时常犯错误一\"><a class=\"anchor\" href=\"#使用时常犯错误一\">#</a> 使用时常犯错误一</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">GetMemory</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码显然是错误的，函数传值时临时拷贝了一个形参，开辟动态内存空间后空间地址传值给了形参，而实参 str 并没有接收到动态内存空间，应该改为使用二级指针</p>\n<h5 id=\"使用时常犯错误二\"><a class=\"anchor\" href=\"#使用时常犯错误二\">#</a> 使用时常犯错误二</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码有可能能正常的输出 world，但是实际上是错误的，str 释放后没有及时置为 NULL。后面又使用了 str，这就是典型的野指针（非法访问内存），这里可能不报错只是因为分配的那一段空间还没有被其他内容覆盖。</p>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数",
                "内存"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8329%EF%BC%9A%E8%81%94%E5%90%88%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8329%EF%BC%9A%E8%81%94%E5%90%88%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/",
            "title": "椋鸟C语言笔记#29：联合体、枚举类型",
            "date_published": "2023-12-24T12:13:19.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"联合体共用体\"><a class=\"anchor\" href=\"#联合体共用体\">#</a> 联合体（共用体）</h4>\n<p>联合体和结构体类似，也由一个或多个成员构成</p>\n<p>但是联合体的特殊之处在于编译器<strong>只为成员中宽度最大的成员分配足够的内存空间</strong></p>\n<p>其余的所有成员都<strong>共用同一片空间</strong>，所以联合体也被称为<strong>共用体</strong></p>\n<p>这也就导致了如果给其中一个成员赋值，其他成员的值也会跟着变化</p>\n<h5 id=\"联合体的声明\"><a class=\"anchor\" href=\"#联合体的声明\">#</a> 联合体的声明</h5>\n<p>联合体的声明和结构体类似，比方说：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> U1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">union</span> U2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">union</span> U3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> u <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">union</span> U4</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span> u <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">99</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> U5</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span> UU<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"联合体的特点\"><a class=\"anchor\" href=\"#联合体的特点\">#</a> 联合体的特点</h5>\n<p>联合体的大小<strong>至少</strong>是其中最宽成员的大小，比方说下面这段代码的结果是 4：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">union</span> Un</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">union</span> Un un <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>联合体空间共用，占有内存的同一片空间，比方说下面代码在小端机器的输出为 11223355：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">union</span> Un</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">union</span> Un un <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tun<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tun<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">0x55</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\\n\"</span><span class=\"token punctuation\">,</span> un<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"联合体的大小\"><a class=\"anchor\" href=\"#联合体的大小\">#</a> 联合体的大小</h5>\n<p>但是联合体的大小也是<strong>存在内存对齐</strong>的</p>\n<p>如果最大成员大小不是最大对齐数的整数倍的时候，就会对齐到最大对齐数的整数倍</p>\n<p>比方说，下面程序的输出结果为 8 16：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">union</span> Un1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">union</span> Un2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">short</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">union</span> Un1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">union</span> Un2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用联合体可以在部分情况下节省空间。</p>\n<p>比方说，如果一些物品（包括书、杯子、衬衫）都拥有价格、数量等信息。而其中每一类物品又有各自的分类信息（如书有书名、作者、页数等信息）。</p>\n<p>这个时候我们可以写出这样的结构体类型（结构体联合体嵌套后面会深入讲讲）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">item</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 公共属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 定价</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 私有属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">char</span> title<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 书名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">char</span> author<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 作者</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> pages<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ⻚数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">char</span> design<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设计</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> cup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">char</span> design<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 设计</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> colors<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 颜⾊</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> sizes<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 尺⼨</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> shirt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"枚举类型\"><a class=\"anchor\" href=\"#枚举类型\">#</a> 枚举类型</h4>\n<p>枚举类型，顾名思义，就是一一列举的类型。</p>\n<p>枚举是 C 语言的一种<strong>定义整型常量</strong>的方法，其声明方法与结构体 / 联合体类似：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Sex</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tMALE<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tFEMALE<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tOTHER\t<span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tRED <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tGREEN <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tBLUE <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Day</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tMON<span class=\"token punctuation\">,</span>        <span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tTUE<span class=\"token punctuation\">,</span>        <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tSAT <span class=\"token operator\">=</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//114</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    THU <span class=\"token operator\">=</span> <span class=\"token number\">514</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//514</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    FRI <span class=\"token operator\">=</span> <span class=\"token number\">8</span>，   <span class=\"token comment\">//8</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    SAT，       <span class=\"token comment\">//9</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    SUN         <span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：与结构体、联合体不同，花括号中的<strong>成员以逗号分割，最后一个成员后无逗号</strong></p>\n<p>上面的 enum Sex、enum Color 就是定义的两个枚举类型，而花括号里面则是枚举类型的可能取值，也就是<strong>枚举常量</strong></p>\n<p>我们看到，枚举常量可以在定义时直接赋值为我们需要的整型常数值，也可以留空。如果留空，则<strong>其值为上一个数的值加一；如果第一个值留空则默认赋值为 0</strong></p>\n<h5 id=\"枚举类型的使用\"><a class=\"anchor\" href=\"#枚举类型的使用\">#</a> 枚举类型的使用</h5>\n<p>枚举类型中的枚举常量可以直接拿来当整型常量数字使用，比方说：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tRED <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tGREEN <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tBLUE <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> GREEN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们还可以用声明过了的枚举常量创建枚举变量或其指针，枚举变量的取值范围为其类型的所有枚举常量值。创建方法与结构体 / 联合体相同（可以声明时创建也可以后面创建）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">ENUM_A</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tX1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tY1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tZ1 <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tA1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tB1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> enumB <span class=\"token operator\">=</span> B1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> penmB <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>enumB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">ENUM_A</span> enumA <span class=\"token operator\">=</span> Y1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\\n\"</span><span class=\"token punctuation\">,</span> enumA<span class=\"token punctuation\">,</span> enumB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>给枚举变量赋值时我们<strong>尽量使用对应枚举常量的标识符，不要直接使用数字</strong></p>\n<p>比方说，上面代码给 enumA 初始化为 Y1，而不是写成初始化为 1</p>\n<p>其实在 C 语言中，如果使用数字赋值也是可以的，因为 C 语言的类型检查不严格，而在 C++ 这样类型检查严格的情况下就会报错。所以我们养成良好的习惯就不要写成数字赋值了</p>\n<h5 id=\"枚举类型的优点\"><a class=\"anchor\" href=\"#枚举类型的优点\">#</a> 枚举类型的优点</h5>\n<p>我们可以用预处理命令 #define 定义标识符常量，那为什么还要使用枚举类型呢？</p>\n<ol>\n<li>增强代码的可读性和可维护性</li>\n<li>枚举类型有类型检查更严谨</li>\n<li>便于调试，标识符常量在预处理的时候就被全部直接替换为数字不便于调试</li>\n<li>使用方便，可以一次性定义多个常量</li>\n<li>遵循作用域规则</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "联合体",
                "枚举"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8328%EF%BC%9A%E5%8C%BF%E5%90%8D%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E4%BC%A0%E5%8F%82%E3%80%81%E4%BD%8D%E6%AE%B5/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8328%EF%BC%9A%E5%8C%BF%E5%90%8D%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93%E4%BC%A0%E5%8F%82%E3%80%81%E4%BD%8D%E6%AE%B5/",
            "title": "椋鸟C语言笔记#28：匿名结构体、结构体的内存对齐、结构体传参、位段",
            "date_published": "2023-12-17T11:54:24.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<p>关于结构体的基本内容 (包括结构体的声明、创建、初始化、结构成员访问) 已经在笔记 #15 中讲述，不再赘述。</p>\n<h4 id=\"在定义结构体时起别名\"><a class=\"anchor\" href=\"#在定义结构体时起别名\">#</a> 在定义结构体时起别名</h4>\n<p>在<strong>定义结构体时前面直接加 typedef 进行起别名的操作</strong>不会影响结构体的创建。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">a</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> sta<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就是定义了一个结构体类型 struct a, 然后给它起别名为类型 sta</p>\n<p>但是这样就<strong>不能在定义结构体类型的时候直接创建结构体变量了</strong></p>\n<p>注意 (相关内容看下面):</p>\n<ul>\n<li>匿名结构体可以起别名，这样就能正常使用了</li>\n<li>自引用同时起别名不能用别名自引用 (创建的优先顺序高于起别名)</li>\n</ul>\n<h4 id=\"匿名结构体\"><a class=\"anchor\" href=\"#匿名结构体\">#</a> 匿名结构体</h4>\n<p>结构体在声明时，其实可以省略结构体标签 (名称)。如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就是匿名的创建了一个结构体并声明了一个该类型的结构体变量。</p>\n<p>注意，在不起别名的情况下:</p>\n<ul>\n<li><strong>匿名创建结构体如果没有直接声明几个对应的结构体变量，之后就再也不能申请了。</strong></li>\n<li><strong>匿名创建结构体之后也再也无法找到这个结构体类型了。</strong></li>\n<li><strong>两个成员相同的匿名结构体不会被认为是同一种结构体</strong>，比方说:</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上面这种情况下，如果令 p 等于 &amp;a 就是非法的，因为两个匿名结构体类型不一样。</p>\n<p>但是我们可以在<strong>创建匿名结构体的时候起别名</strong>，这样就能通过别名正常使用结构体了:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> st<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>比方说上面这段代码就能继续通过 st 这个类型名继续进行创建变量等操作</p>\n<h4 id=\"结构体的自引用\"><a class=\"anchor\" href=\"#结构体的自引用\">#</a> 结构体的自引用</h4>\n<p>结构体可以<strong>自引用</strong>，常用于<strong>链表</strong> (以后讲)</p>\n<p>当然这不是说结构体的成员可以是该结构体本身</p>\n<p>(如果这样就无限套娃了，大小无穷大)</p>\n<p>结构体的<strong>自引用指的是结构体的成员变量可以是该结构体的指针类型</strong></p>\n<p>比方说:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">chain</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">chain</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>如果起别名和自引用同时进行的话，自引用的地方不能用别名</strong></p>\n<p>比方说这样是不行的:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">chain</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    st<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> st<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>应该写成这样 (这边顺便把指针起别名了):</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">chain</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">chain</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> st<span class=\"token operator\">*</span> pst<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"结构体的内存对齐\"><a class=\"anchor\" href=\"#结构体的内存对齐\">#</a> 结构体的内存对齐</h4>\n<p>我们现在研究一下结构体的内存大小</p>\n<p>结构体类型占内存的大小是不是等于所有成员变量占内存的和呢？</p>\n<p>我们写一段程序验证一下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码在 Win11 VS2022 x64 Debug 的环境下输出 12</p>\n<p>而我们知道如果单纯的成员变量大小相加，答案应该为 6</p>\n<p>所以，结构体内存究竟是如何排布的呢？</p>\n<p>其实结构体在内存中的排布，遵循<strong>内存对齐规则</strong>:</p>\n<blockquote>\n<ol>\n<li>\n<p>结构体的第一个成员对齐到和结构体变量起始位置偏移量为 0 的地址处</p>\n</li>\n<li>\n<p>其他成员变量要对齐到某个数字 (对齐数) 的<strong>整数倍</strong>的地址处<br />\n<strong>对齐数</strong> = <strong>编译器默认的对齐数</strong> 与 <strong>该成员变量大小</strong> 的 <strong>较小值</strong></p>\n<pre><code> VS2022 的默认对齐数为 8,Linux gcc 没有默认对齐数\n</code></pre>\n</li>\n<li>\n<p>结构体<strong>总大小为结构体成员中最大的对齐数的整数倍</strong></p>\n</li>\n<li>\n<p>如果结构体嵌套了结构体，嵌套的结构体成员对齐到<strong>自己成员中最大对齐数的整数倍</strong>处，并且占据单独计算自身大小那么大的空间 (<strong>因为内存对齐浪费的空间不会被下一个成员利用</strong>)。结构体总大小就是所有对齐数 (包括嵌套结构体中的成员) 中最大对齐数的整数倍</p>\n</li>\n</ol>\n</blockquote>\n<h5 id=\"offsetof\"><a class=\"anchor\" href=\"#offsetof\">#</a> offsetof</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义于头文件 &lt;stddef.h> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">offsetof</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span> </span><span class=\"token comment\">/*implementation-defined*/</span></span></pre></td></tr></table></figure><p>在 stddef.h 头文件中有一个宏 offsetof, 可以返回一个成员在结构体中的偏移量</p>\n<p>其第一个参数是结构体类型名，第二个参数是成员变量名</p>\n<p>其返回值可以用 % zd、% zu 接收</p>\n<h5 id=\"内存对齐练习\"><a class=\"anchor\" href=\"#内存对齐练习\">#</a> 内存对齐练习</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">char</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S3</span> s3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">char</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 Win11 VS2022 x64 Debug 的环境下，4 段输出为 12、8、16、32</p>\n<h5 id=\"为什么要内存对齐\"><a class=\"anchor\" href=\"#为什么要内存对齐\">#</a> 为什么要内存对齐</h5>\n<p>其实这是一种<strong>空间换时间</strong>的做法</p>\n<h6 id=\"平台原因\"><a class=\"anchor\" href=\"#平台原因\">#</a> 平台原因</h6>\n<p>不是所有的硬件平台都能访问任意地址上的任意数据，<strong> 某些平台只能在某些地址处 (对齐的位置) 取对应类型的数据</strong>，否则硬件异常。</p>\n<h6 id=\"性能原因\"><a class=\"anchor\" href=\"#性能原因\">#</a> 性能原因</h6>\n<p><strong>内存对齐的情况下访问速度一般会更快</strong></p>\n<p>访问未对齐内存的数据，处理器可能需要作两次内存访问 (内存是一段一段访问的，数据不对齐可能存放在两个内存的访问段内), 而对齐的内存访问仅需要一次访问</p>\n<h5 id=\"书写规范\"><a class=\"anchor\" href=\"#书写规范\">#</a> 书写规范</h5>\n<p>所以为了节省空间，我们<strong>创建结构体应该尽量使较小的成员变量在前面，较大的放在后面</strong></p>\n<h5 id=\"修改默认对齐数\"><a class=\"anchor\" href=\"#修改默认对齐数\">#</a> 修改默认对齐数</h5>\n<p>我们可以使用预处理指令 #pragma 来修改编译器默认的对齐数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    </span><span class=\"token comment\">// 设置默认对⻬数为 1</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">char</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    </span><span class=\"token comment\">// 取消设置的对⻬数，还原为默认</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面这段代码的输出结果就为 6</p>\n<h4 id=\"结构体传参\"><a class=\"anchor\" href=\"#结构体传参\">#</a> 结构体传参</h4>\n<p>与其他数据类型类似，结构体传参也分为直接传参与传地址两种</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span><span class=\"token operator\">*</span> ps<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ps<span class=\"token operator\">-></span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">print1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传结构体</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>两种方式作用相同，但是我们<strong>优先使用传地址</strong>的方式</p>\n<p>因为函数传参时需要拷贝实参作为形参压栈，如果传递结构体本身会占用较多的内存</p>\n<h4 id=\"位段位域\"><a class=\"anchor\" href=\"#位段位域\">#</a> 位段 (位域)</h4>\n<h5 id=\"位段的概念\"><a class=\"anchor\" href=\"#位段的概念\">#</a> 位段的概念</h5>\n<p>位段是一种特殊的结构体类型，其成员的内存宽度可以被我们规定</p>\n<p>位段成员必须是 int、signed、unsigned 之间的一种 (C99 以前)</p>\n<p>C99 标准开始，位段成员也可以使用布尔类型</p>\n<h5 id=\"位段的声明\"><a class=\"anchor\" href=\"#位段的声明\">#</a> 位段的声明</h5>\n<p>位段的声明与结构体类似，但是成员名 (可以省略代表直接浪费一段空间) 后有一个冒号和数字:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> _a <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">signed</span> _b <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> _c <span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> _d <span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段程序在 Win11 VS2022 x64 Debug 的环境下的输出结果为 8</p>\n<p>为什么呢？这与位段的内存分配有关</p>\n<h5 id=\"位段的内存分配\"><a class=\"anchor\" href=\"#位段的内存分配\">#</a> 位段的内存分配</h5>\n<p>位段声明中冒号后面的数字就代表了其被规定占据多少个比特位</p>\n<p>而整个位段总大小是按 4 个字节 (int 类) 或者 1 个字节 (_Bool)<strong> 逐步分配</strong>的</p>\n<p>上述代码中位段 A, 内存申请了一次 4 个字节 (32 位)。这 32 位填充了_a、_b、_c 后只剩下 15 位了，发现不够继续填充_d, 就再次申请了 4 个字节用来填充数据_d, 所以总共占据了 8 个字节。</p>\n<h5 id=\"位段的特殊声明\"><a class=\"anchor\" href=\"#位段的特殊声明\">#</a> 位段的特殊声明</h5>\n<p>相邻的几段如果类型占据的空间大小一致可以打包起来写在一起 (通常可以), 比方说:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> _a <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> _b <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  _c <span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> _d <span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 宽 8</span></pre></td></tr></table></figure><p>规定空间可以省略，代表占据一整个类型的空间，比方说:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> _a <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> _b <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  _c <span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> _d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 宽 8</span></pre></td></tr></table></figure><p>这里_d 就占据了整个 4 字节 (32 位) 的空间</p>\n<p>成员名可以省略用来占据一定不被使用的空间:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">C</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> _a <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">signed</span> _b <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> _c <span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> _d <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _e <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> _f <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> _g <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 宽 12</span></pre></td></tr></table></figure><p>这里_f 和_g 直接有两个比特是被占位的</p>\n<p>如果宽度规定为 0 (即零位域，必须未命名) 代表直接开始下一个分配单元，这边剩下来的丢掉:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">D</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> _a <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">signed</span> _b <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> _c <span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> _d <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _e <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> _f <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> _g <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 宽 16</span></pre></td></tr></table></figure><h5 id=\"位段的跨平台性\"><a class=\"anchor\" href=\"#位段的跨平台性\">#</a> 位段的跨平台性</h5>\n<p>位段<strong>跨平台性很差</strong>，原因如下:</p>\n<ul>\n<li>int 位段被当做有符号还是无符号是不确定的</li>\n<li>机器的位数不一样导致类型宽度不一样</li>\n<li>位段在每个分配单元中数据从左往右填还是从右往左填不确定</li>\n<li>还有很多其他原因</li>\n</ul>\n<p>所以，虽然位段很省空间，没事还是不要用位段</p>\n<h5 id=\"位段注意事项\"><a class=\"anchor\" href=\"#位段注意事项\">#</a> 位段注意事项</h5>\n<p><strong>位段不能取地址，不能有指针变量，会报错</strong></p>\n<p>因为位段的成员的起始位置可以不在整字节处，没有地址</p>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "结构体",
                "内存",
                "位段"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8327%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E5%AD%97%E6%8F%90%E5%8F%96%EF%BC%88atoi%E3%80%81atol%E3%80%81atoll%E3%80%81atof%EF%BC%89/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8327%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E5%AD%97%E6%8F%90%E5%8F%96%EF%BC%88atoi%E3%80%81atol%E3%80%81atoll%E3%80%81atof%EF%BC%89/",
            "title": "椋鸟C语言笔记#27：字符串数字提取（atoi、atol、atoll、atof）",
            "date_published": "2023-12-11T06:16:26.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<p>在 stdlib.h 中还有几个有意思的字符串函数</p>\n<p>它们的功能是将字符串开头的数字提取出来</p>\n<p>下面我们具体看一看这几个函数吧</p>\n<h4 id=\"atoi\"><a class=\"anchor\" href=\"#atoi\">#</a> atoi</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>atoi，即 auto int。舍弃任何空白符，直至找到首个非空白符，然后接收尽可能多的字符以组成合法的整数（可以有负号）表示，并转换之为整数值。如果没有读取到数字，就返回 0；如果超出可读取类型范围，那么返回值是未定义的。</p>\n<p>使用示例如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -123junk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"junk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 无可进行的转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2147483648\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 在 int 范围外</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token number\">2147483648</span></pre></td></tr></table></figure><h5 id=\"模拟实现\"><a class=\"anchor\" href=\"#模拟实现\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">my_atoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstr <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">++</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&amp;&amp;</span> flag <span class=\"token operator\">||</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">&amp;&amp;</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sign <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> sign <span class=\"token operator\">*</span> ret <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\t -114514\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">my_atoi</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"atol-与-atollc99-起\"><a class=\"anchor\" href=\"#atol-与-atollc99-起\">#</a> atol 与 atoll（C99 起）</h4>\n<p>与 atoi 功能完全一致，只是变成 long 和 long long 类型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">atol</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"atof\"><a class=\"anchor\" href=\"#atof\">#</a> atof</h4>\n<p>atof 用于提取的是浮点数（小数形式或者科学计数法）</p>\n<p>atof 函数使用需要包含 stdlib.h 和 math.h 两个头文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数会舍弃任何空白符，直至找到首个非空白符。然后它会取用尽可能多的字符，以构成合法的浮点数表示，并将它们转换成浮点值。</p>\n<h5 id=\"合法的浮点值\"><a class=\"anchor\" href=\"#合法的浮点值\">#</a> 合法的浮点值</h5>\n<ol>\n<li>十进制浮点数表达式。它由下列部分组成：</li>\n</ol>\n<ul>\n<li>(可选) 正或负号</li>\n<li>非空的十进制数字序列，可选地包含一个小数点字符（由当前的 C 本地环境确定）（定义有效数字）</li>\n<li>(可选)  <code>e</code>  或  <code>E</code>  ，并跟随可选的正或负号，以及非空十进制数字序列（以 10 为底定义指数）</li>\n</ul>\n<ol start=\"2\">\n<li>十六进制浮点数表达式 (C99 起)。它由下列部分组成：</li>\n</ol>\n<ul>\n<li>(可选) 正或负号</li>\n<li><code>0x</code>  或  <code>0X</code></li>\n<li>非空的十六进制数字序列，选地包含一个小数点字符（由当前的 C 本地环境确定）（定义有效数字）</li>\n<li>(可选)  <code>p</code>  或  <code>P</code>  ，并跟随可选的正或负号，以及非空十进制数字序列（以 2 为底定义指数）</li>\n</ul>\n<ol start=\"3\">\n<li>无穷大表达式 (C99 起)。它由下列部分组成：</li>\n</ol>\n<ul>\n<li>(可选) 正或负号</li>\n<li><code>INF</code>  或  <code>INFINITY</code>  ，忽略大小写</li>\n</ul>\n<ol start=\"4\">\n<li>非数（NaN）表达式 (C99 起)。它由下列部分组成：</li>\n</ol>\n<ul>\n<li>(可选) 正或负号</li>\n<li><code>NAN</code>  或  <code>NAN(</code> <em>char_sequence</em> <code>)</code>  ，忽略  <code>NAN</code>  部分的大小写。 <em>char_sequence</em> 只能由数字、拉丁字母和下划线构成。结果是一个静态的 NaN 浮点值。</li>\n</ul>\n<ol start=\"5\">\n<li>任何其他可由当前 C 本地环境接受的表达式</li>\n</ol>\n<h5 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h5>\n<p>成功时返回代表 string 内容的 double 值</p>\n<p>若转换的值在返回值范围外，则返回值未定义</p>\n<p>若无可进行的转换，则返回 0.0</p>\n<h5 id=\"使用示例\"><a class=\"anchor\" href=\"#使用示例\">#</a> 使用示例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  -0.0000000123junk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.012\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"15e16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-0x1afp-2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.0e+309\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 超出 double 范围</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">atof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"junk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 无可进行的转换</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在某种环境下输出：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token number\">1.23e-08</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.012</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1.5e+17</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token number\">107.75</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>inf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nan</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>inf</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8326%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%88%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%97%E8%8A%82%E5%BA%8F%EF%BC%89%E3%80%81%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%88IEEE754%EF%BC%89/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8326%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%88%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%AD%97%E8%8A%82%E5%BA%8F%EF%BC%89%E3%80%81%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%88IEEE754%EF%BC%89/",
            "title": "椋鸟C语言笔记#26：数据在内存中的存储（大小端字节序）、浮点数的存储（IEEE754）",
            "date_published": "2023-12-10T16:40:38.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"大小端字节序\"><a class=\"anchor\" href=\"#大小端字节序\">#</a> 大小端字节序</h4>\n<h5 id=\"什么是大小端\"><a class=\"anchor\" href=\"#什么是大小端\">#</a> 什么是大小端</h5>\n<p>首先，我们要知道，整数（short、int、long、long long）在<strong>内存中以补码的形式存储</strong>，无符号整数（unsigned）在内存中以原始二进制序列存储。</p>\n<p>当数据长度小于等于一个字节时 ，很显然计算机就直接存储在一个字节内（<strong>内存存储的基本单元是字节</strong>）。而大小端字节序，则是超过一个字节的数据在内存中存储的两种方式。</p>\n<p>为了更清楚的理解大小端字节序，下面我们创建一个变量 a：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们知道 int 整型占 4 个字节，也就是说 12、34、56、78 会分别存储在 4 个字节单元中。那么，这 4 个字节单元在内存中是从高地址向低地址排列还是由低向高就成了一个问题。</p>\n<p>我们把 78 这一头叫做数据的<strong>低位字节</strong>，12 那一头叫做<strong>高位字节</strong>。那么：</p>\n<ul>\n<li><strong>将数据的低位字节存储在内存的高位，就叫大端存储，对应大端机器</strong></li>\n<li><strong>将数据的低位字节存储在内存的低位，就叫小端存储，对应小端机器</strong></li>\n</ul>\n<p>下面我们在 Visual Stodio（x86 Debug）环境下调试上方代码， 并打开内存窗口，观察变量 a 的内存空间：</p>\n<p><img data-src=\"1.png\" alt=\"图片1\" title=\"图片1\" /><img data-src=\"2.png\" alt=\"图片2\" title=\"图片2\" /></p>\n<p>这就是将数据的低位字节（78）储存在了内存的低位，是小端存储模式。</p>\n<blockquote>\n<p>我们常用的大多数环境（x86、x64…）都是小端结构（ <strong>有计算优势</strong>），但是仍然存在大端模式的机器（如 KEIL C51）。甚至有些 ARM 处理器可以让硬件选择采用大端还是小端。</p>\n</blockquote>\n<h5 id=\"写一个判断大小端的程序\"><a class=\"anchor\" href=\"#写一个判断大小端的程序\">#</a> 写一个判断大小端的程序</h5>\n<p>其实很简单，我们截取数字 1 在内存中的第一个字节即可。</p>\n<p>如果输出是 1 就是小端机器，如果是 0 就是大端机器。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">check_sys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check_sys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该机器为小端字节序机器\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该机器为大端字节序机器\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里先取 a 的地址、强制类型转换为 char * 再解引用来取出 a 在内存中的第一个字节。</p>\n<p><strong>注意：这里不能直接将 a 强制类型转换为 char 类型来读取第一个字节，因为这样永远只会截取数据最低位的字节，和大小端机器无关。</strong></p>\n<p>或者我们也可以用联合体的方式取第一个字节（联合体相关内容在之后的笔记）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">check_sys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    u<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"浮点数在内存中的存储ieee-754-规则\"><a class=\"anchor\" href=\"#浮点数在内存中的存储ieee-754-规则\">#</a> 浮点数在内存中的存储（IEEE 754 规则）</h4>\n<h5 id=\"引入\"><a class=\"anchor\" href=\"#引入\">#</a> 引入</h5>\n<p>浮点数包括 float、double、long double 等类型，可写成小数形式（3.14）或科学计数法（1.1E2）</p>\n<p>不同浮点数的数据范围在 float.h 头文件中被规定</p>\n<p>下面我们看一段代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">float</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n的值为：%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p的值为：%f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n的值为：%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*p的值为：%f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码的输出结果为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n的值为：<span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span>p的值为：<span class=\"token number\">0.000000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n的值为：<span class=\"token number\">1091567616</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>p的值为：<span class=\"token number\">9.000000</span></pre></td></tr></table></figure><p>明明 n 与 * p 在内存中是同一个数，为什么会出现上方的情况呢？</p>\n<p>这与浮点数在内存中的存储有关</p>\n<h5 id=\"存储规则解释\"><a class=\"anchor\" href=\"#存储规则解释\">#</a> 存储规则解释</h5>\n<p>浮点数在内存中的存储遵循 IEEE 754 规则，由电气与电子工程师协会（IEEE）规定</p>\n<p>以<strong>单精度浮点数</strong>为例，我们将其分为 3 个部分存储在内存中（都是 01 组成的二进制）：</p>\n<ul>\n<li><strong>符号位 S</strong>：1 位，0 代表正数，1 代表负数</li>\n<li><strong>阶码 E</strong>：8 位，就是科学计数法的指数部分加 127（因为其表示精度的是 - 126 次方到 127 次方，要加上 127 让阶码从数字 1 到 254 便于存储，<strong>因此单精度浮点数也叫余 127 码</strong>）（<strong>阶码 0 与 255 有特殊含义，见下方读取相关内容</strong>）</li>\n<li><strong>尾数 M</strong>：23 位，就是科学计数法中数字小数点后的部分</li>\n</ul>\n<p>以数字 5.0 为例：</p>\n<ol>\n<li>其为正数，则 S=0</li>\n<li>其可以表示成二进制科学计数法 1.01*2^2，则尾数 M 为 01000000000000000000000</li>\n<li>其科学计数法指数为 2 加上 127 得到阶码 E=129=10000001（二进制）</li>\n<li>合起来就能得到数字 5.0 在内存中的存储：0100 0000 1010 0000 0000 0000 0000 0000</li>\n</ol>\n<p>对于<strong>双精度浮点数</strong>，其规则与单精度浮点数类似，但是阶码变为 11 位（<strong>余 1023 码</strong>），尾数变为 52 位。总字节数由 4 字节变为 8 字节。</p>\n<h5 id=\"读取规则解释\"><a class=\"anchor\" href=\"#读取规则解释\">#</a> 读取规则解释</h5>\n<p>读取时有 3 种情况：</p>\n<h6 id=\"1-阶码不全为-0-或全为-1规格化数\"><a class=\"anchor\" href=\"#1-阶码不全为-0-或全为-1规格化数\">#</a> 1. 阶码不全为 0 或全为 1（规格化数）</h6>\n<p>读取时阶码减去 127（或 1023）得到指数部分，尾数加 1 得到数字部分</p>\n<p>所以说单精度浮点数规格化数的<strong>指数范围是 - 126 到 127</strong></p>\n<h6 id=\"2-阶码全为-0非规格化数\"><a class=\"anchor\" href=\"#2-阶码全为-0非规格化数\">#</a> 2. 阶码全为 0（非规格化数）</h6>\n<p>读取时阶码 ** 加一再减去 127（或 1023）** 得到指数部分（加一使浮点数取值连续），<strong>尾数不加 1</strong>，用于表示极其接近 0 的数字</p>\n<p>如果尾数也全为 0，则代表浮点数的 ±0</p>\n<h6 id=\"3-阶码全为-1尾数全为-0inf\"><a class=\"anchor\" href=\"#3-阶码全为-1尾数全为-0inf\">#</a> 3. 阶码全为 1，尾数全为 0（inf）</h6>\n<p>被判定为浮点数的无穷，正负由符号位决定，用<strong>代码 inf</strong> 表示</p>\n<h6 id=\"4-阶码全为-1尾数不全为-0非数nannot-a-number\"><a class=\"anchor\" href=\"#4-阶码全为-1尾数不全为-0非数nannot-a-number\">#</a> 4. 阶码全为 1，尾数不全为 0（非数，NaN，Not a Number）</h6>\n<p>用<strong>代码 NaN</strong> 表示，用于表示异常数据（比如某个数除以 0 就会返回 NaN，也有可能输出 IND-indeterminate 不确定的）</p>\n<h4 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h4>\n<h5 id=\"1-浮点数\"><a class=\"anchor\" href=\"#1-浮点数\">#</a> 1. 浮点数</h5>\n<p>这时上面浮点数存储开头的那一段代码就好理解了</p>\n<p>首先第一部分将整型 9 当做浮点数输出，整型 9 在内存中存储为：</p>\n<p>0000 0000 0000 0000 0000 0000 0000 1001</p>\n<p>将其当做浮点数，则 S=0，阶码 E=00000000，由上面非规格化数内容我们知道这是一个趋近于 0 的数，所以输出了 0.000000</p>\n<p>第二部分将浮点数 9.0 当做整数输出，浮点数 9 在内存中存储为：</p>\n<p>0100 0001 0001 0000 0000 0000 0000 0000</p>\n<p>将其当做整型输出即补码转换为原码为：1091567616</p>\n<h5 id=\"2-整型存储\"><a class=\"anchor\" href=\"#2-整型存储\">#</a> 2. 整型存储</h5>\n<h6 id=\"a-下面程序的输出为\"><a class=\"anchor\" href=\"#a-下面程序的输出为\">#</a> a. 下面程序的输出为</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d,b=%d,c=%d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>就是很简单的截取，输出 a=-1,b=-1,c=255</p>\n<h6 id=\"b-下面两个程序的输出为\"><a class=\"anchor\" href=\"#b-下面两个程序的输出为\">#</a> b. 下面两个程序的输出为</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>两个程序的输出结果均为 4294967168</p>\n<p>也是简单的整型提升的问题</p>\n<p>比如第一段程序 - 128 的补码为 1111 1111 1111 1111 1111 1111 1000 0000</p>\n<p>截取到 a 为 1000 0000，整型提升回 1111 1111 1111 1111 1111 1111 1000 0000</p>\n<p>其直接二进制转换十进制为 4294967168</p>\n<p>第二段等价，对于 char 来说 127 之上就循环回到 - 128，所以 128 与 - 128 在这里没有区别</p>\n<h6 id=\"c-下面程序的输出为\"><a class=\"anchor\" href=\"#c-下面程序的输出为\">#</a> c. 下面程序的输出为</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此代码输出为 255</p>\n<p>同样的，对于 char 类型，-128 在减一就循环回到了 127。所以这里就是从 - 1 一直降到 - 128，在从 127 降到 1（strlen 遇到 “\\0” 结束，其 ASCII 码为 0，所以之后的没意义）</p>\n<h6 id=\"d-下面两个程序的输出为\"><a class=\"anchor\" href=\"#d-下面两个程序的输出为\">#</a> d. 下面两个程序的输出为</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%u\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这两段代码都是死循环，很简单</p>\n<h6 id=\"e-下面程序的输出为假设小端环境\"><a class=\"anchor\" href=\"#e-下面程序的输出为假设小端环境\">#</a> e. 下面程序的输出为（假设小端环境）</h6>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ptr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x,%x\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其输出结果为 4,2000000（有可能引发读取访问权限冲突）</p>\n<p>很好理解，指针 1 减一指向数组第 4 个元素，指针 2 指向第一个元素向后偏移一位字节，也就是略过了数字 1 内存第一个字节又加上了数字 2 内存第一个字节。在小端环境下即为 0x02000000</p>\n",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "内存"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8325%EF%BC%9A%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8325%EF%BC%9A%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/",
            "title": "椋鸟C语言笔记#25：内存函数",
            "date_published": "2023-12-05T13:23:29.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<p>在 string.h 头文件中有一些用于内存操作的函数</p>\n<h4 id=\"memcpy\"><a class=\"anchor\" href=\"#memcpy\">#</a> memcpy</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>memcpy 是<strong>内存层面</strong>的复制，也即把一节内存的内容拷贝到另外一个位置</p>\n<p>memcpy 从 src 指向的位置开始向后复制 <strong>n 个字节</strong>的数据到 dest 所指向的内存位置，并返回 dest 开始指向的位置</p>\n<p>注意：</p>\n<ul>\n<li>与 strcpy、strncpy 不同，这个函数遇到‘\\0’不会做任何其他处理，照样复制</li>\n<li><strong>避免复制前后的内存空间有重叠的情况，这种行为是未定义的！！！（可能会复制出错，有些编译器在实现时会处理这个问题使得能够正常复制）</strong></li>\n</ul>\n<h5 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h5>\n<p>比如，下述代码的运行结果为：1 2 3 4 5 0 0 0 0 0</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> arr1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"模拟实现\"><a class=\"anchor\" href=\"#模拟实现\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"memmove\"><a class=\"anchor\" href=\"#memmove\">#</a> memmove</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>memmove 就是进阶版的 memcpy，<strong>它可以在 dest 与 src 的空间发生重叠时完成复制</strong></p>\n<p>其他的 memmove 与 memcpy 完全一致</p>\n<h5 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h5>\n<p>比如，下述代码的运行结果为：1 2 1 2 3 4 5 8 9 10</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"模拟实现-2\"><a class=\"anchor\" href=\"#模拟实现-2\">#</a> 模拟实现</h5>\n<p>以上述代码为例，我们想要将 1 2 3 4 5 拷贝到 3 4 5 6 7 所在的位置。我们发现，如果从前往后一个一个字符去拷贝，1 和 2 拷贝完后就已经覆盖了 3 和 4，导致 5 6 和 7 也被覆盖为 1 2 和 1。而我们从后往前一个一个字符去拷贝就能正确的拷贝为 1 2 1 2 3 4 5 8 9 10。</p>\n<p>但是从后向前拷贝就解决问题了吗？</p>\n<p>不，如果我们要把 3 4 5 6 7 拷贝到 1 2 3 4 5 所在的位置，就又会遇到同样的问题了，会把字符串拷贝成 7 6 7 6 7 6 7 8 9 10。</p>\n<p>所以，要解决问题，我们需要分类讨论。当 dest 在 src 指针前时，我们从前向后拷贝；当 dest 在 src 指针后时，我们从后向前拷贝。</p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dest <span class=\"token operator\">&lt;=</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tdest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tsrc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dest<span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"memset\"><a class=\"anchor\" href=\"#memset\">#</a> memset</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">memset</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>mem 就是用来<strong>批量的设置内存</strong>的，可以将内存中的值<strong>以字节为单位</strong>设置成想要的内容</p>\n<h5 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h5>\n<p>比如下述代码的运行结果为：My name is xxxxx.</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"My name is LiHua.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"模拟实现-3\"><a class=\"anchor\" href=\"#模拟实现-3\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"memcmp\"><a class=\"anchor\" href=\"#memcmp\">#</a> memcmp</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>memcmp 就是升级版 strcmp，它<strong>逐字节比较</strong>从 p1 和 p2 指向的位置开始的后续 n 个字节的内存</p>\n<p>同样的，如果 p1 更大则返回大于 0 的数，反之返回小于 0 的数，相等返回 0</p>\n<h5 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h5>\n<p>比如下述代码的运行结果为：1（大于 0 的数）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"QWERtyuIOP\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> s2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"QWERtYuIoP\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"模拟实现-4\"><a class=\"anchor\" href=\"#模拟实现-4\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">my_memcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">&amp;&amp;</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1 <span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1 <span class=\"token operator\">&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数",
                "内存"
            ]
        },
        {
            "id": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8323%EF%BC%9A%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/",
            "url": "https://www.starlinglin.com/computer-science/C-programme-note/%E6%A4%8B%E9%B8%9F%20C%20%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%20%EF%BC%8323%EF%BC%9A%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/",
            "title": "椋鸟C语言笔记#23：字符函数、字符串函数",
            "date_published": "2023-11-30T15:57:27.000Z",
            "content_html": "<div class=\"note info\">\n<p>该系列为本人的学习笔记，主要由本人整理书写而成。部分内容来自教材、视频课程等，不能保证完全原创性。</p>\n</div>\n<p>萌新的学习笔记，写错了恳请斧正。</p>\n<h4 id=\"字符分类函数\"><a class=\"anchor\" href=\"#字符分类函数\">#</a> 字符分类函数</h4>\n<p>在 ctype.h 头文件中有一些用于字符分类的函数，用于判断字符属于哪种类型</p>\n<p>其中常见的有:</p>\n<ul>\n<li>iscntrl: 任意控制字符</li>\n<li>isspace: 空白字符：空格、换页 (\\f)、换行 (\\n)、回车 (\\t、制表符 \\ t\\v</li>\n<li>isdigit: 十进制数字 0~9</li>\n<li>isxdigit: 十六进制数字 0<sub>9、a</sub>f、A~F</li>\n<li>islower: 小写字母 a~z</li>\n<li>isupper: 大写字母 A~Z</li>\n<li>isalpha: 字母 a~z 或 A~Z</li>\n<li>isalnum: 字母或数字</li>\n<li>ispunct: 标点符号</li>\n<li>isgraph: 图形字符</li>\n<li>isprint: 任何可打印字符，包括图形字符和空白字符</li>\n</ul>\n<p>这些函数如果判断为假，则返回 0, 否则返回非零</p>\n<p>比方说可以写一个识别小写字母并转换为大写的函数:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">caps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">islower</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>s <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ajiofe\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">caps</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"字符转换函数\"><a class=\"anchor\" href=\"#字符转换函数\">#</a> 字符转换函数</h4>\n<p>其实 ctype.h 头文件中其实已经内置了可以用于大小写转换的函数，即字符转换函数</p>\n<p>其中就包括 tolower 和 toupper, 所以上述代码也可以改为:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">caps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">islower</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ajiofe\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">caps</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实并没有方便多少，感觉用处不大</p>\n<h4 id=\"strlen\"><a class=\"anchor\" href=\"#strlen\">#</a> strlen</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strlen 用于计算字符串的长度，其<strong>返回值 size_t 是无符号整数</strong></p>\n<p>strlen 函数将会返回从传递给它的指针开始直到第一个 “\\0” 为止的非零元素的数量</p>\n<p>使用 strlen 函数需要先包含 string.h 头文件</p>\n<h5 id=\"模拟实现\"><a class=\"anchor\" href=\"#模拟实现\">#</a> 模拟实现</h5>\n<p>最简单的就是循环计数了:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然如果使用递归也可以不用循环计数:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>双指针也可以实现:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">my_strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> p <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"strcpy\"><a class=\"anchor\" href=\"#strcpy\">#</a> strcpy</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strcpy 用于复制字符串，使用需要先包含 string.h 头文件</p>\n<p>strcpy 将从 src 指针头开始直到‘\\0’结尾的部分复制到 dest 指针指向的地方</p>\n<p>注意:</p>\n<ul>\n<li><strong>‘\\0’也会被复制过去</strong></li>\n<li><strong>目标空间可用部分需要足够大</strong></li>\n<li><strong>目标空间应当可修改</strong></li>\n</ul>\n<h5 id=\"模拟实现-2\"><a class=\"anchor\" href=\"#模拟实现-2\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">my_strcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dest<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"strcat\"><a class=\"anchor\" href=\"#strcat\">#</a> strcat</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strcat 用于字符串的追加，使用需要先包含 string.h 头文件</p>\n<p>strcat 将从 dest 指向的位置开始寻找，直到找到‘\\0’, 然后将从 src 指向的位置开始到第一个‘\\0’为止的部分复制到‘\\0’的位置 (包括‘\\0’)</p>\n<p>注意:</p>\n<ul>\n<li><strong>目标字符串也需要有‘\\0’</strong></li>\n<li><strong>目标空间可用部分需要足够大</strong></li>\n<li><strong>目标空间应当可修改</strong></li>\n<li><strong>自己追加自己会造成死循环</strong></li>\n</ul>\n<h5 id=\"模拟实现-3\"><a class=\"anchor\" href=\"#模拟实现-3\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">my_strcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>dest <span class=\"token operator\">&amp;&amp;</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ret <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">++</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dest<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"strcmp\"><a class=\"anchor\" href=\"#strcmp\">#</a> strcmp</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strcmp 用于字符串之间的比较 (逐字符), 使用需要先包含 string.h 头文件</p>\n<p>strcmp 会分别从 str1 与 str2 指向的位置开始对比 ASCII 码值，如果有一方先出现不等情况。则按照规定输出 (<strong>str1 大于 str2 输出正数，反正负数，如果直到两边都遇到‘\\0’都没有不等的情况则输出 0</strong>)</p>\n<p>常用于按字母排序</p>\n<h5 id=\"模拟实现-4\"><a class=\"anchor\" href=\"#模拟实现-4\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">my_strcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">&amp;&amp;</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str1 <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">*</span>str1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tstr1<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> str2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>str1 <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"strncpy\"><a class=\"anchor\" href=\"#strncpy\">#</a> strncpy</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strncpy 与 strcpy 功能一致，但是只复制前 n 个字符 (如果位数足够最后不补 0)</p>\n<p><strong>如果先碰到‘\\0’则后续一直补 0 直到满足 n 个字符的要求</strong></p>\n<h4 id=\"strncat\"><a class=\"anchor\" href=\"#strncat\">#</a> strncat</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，是拼接前 n 个字符，但是<strong>会追加一个‘/0’</strong></p>\n<p>如果<strong>先遇到‘\\0’则停止拼接，不需要补 0</strong></p>\n<h4 id=\"strncmp\"><a class=\"anchor\" href=\"#strncmp\">#</a> strncmp</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，比较前 n 个字符，比较方法同 strcmp</p>\n<h4 id=\"strstr\"><a class=\"anchor\" href=\"#strstr\">#</a> strstr</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strstr 用于寻找字符串的子序列</p>\n<p>strstr 会从 str1 指向的位置开始，寻找第一个与 str2 相同的序列，并返回找到的序列头的地址</p>\n<p><strong>如果没有与 str2 相同的子序列，则返回空指针 NULL</strong></p>\n<h5 id=\"模拟实现-5\"><a class=\"anchor\" href=\"#模拟实现-5\">#</a> 模拟实现</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">my_strstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">&amp;&amp;</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sign1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sign2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sign1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">*</span>sign<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> sign1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tsign1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tsign2 <span class=\"token operator\">=</span> sign1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tsign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sign2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>sign <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sign2 <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tsign2<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> sign<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"strtok\"><a class=\"anchor\" href=\"#strtok\">#</a> strtok</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strtok 用于分割字符串</p>\n<p>sep 参数指向一个字符串，<strong> 定义了用作分隔符的字符集合</strong></p>\n<p>第一个参数指定一个字符串，<strong> 它包含了 0 个或者多个由 sep 字符串中一个或者多个分隔符分割的非空子串</strong></p>\n<ul>\n<li>如果 str 不为 NULL,strtok 函数找到 str 中的<strong>第一个</strong>被分割的子串，<strong> 并将其用‘\\0’结尾 (覆盖后面的分隔符)</strong>,<strong> 返回一个指向这个子串头的指针</strong></li>\n<li>如果 str 为 NULL,strtok 函数会<strong>从上一次使用该函数分割的位置开始，寻找下一个</strong>被分割的子串，<strong> 并将其用‘\\0’结尾 (覆盖后面的分隔符)</strong>,<strong> 返回一个指向这个子串头的指针</strong></li>\n<li>如果已经分割完了，没有什么能返回的了，就返回 <strong>NULL</strong></li>\n</ul>\n<p><strong>注意！<span class=\"spoiler\" title=\"你知道得太多了\">strtok 会改变原字符串</span>！</strong></p>\n<h5 id=\"使用实例\"><a class=\"anchor\" href=\"#使用实例\">#</a> 使用实例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"192.168.0.1:23333\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sep <span class=\"token operator\">=</span> <span class=\"token string\">\".:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> str <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> str <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"strerror\"><a class=\"anchor\" href=\"#strerror\">#</a> strerror</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> errnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>strerror 函数可以<strong>把参数部分错误码对应的错误信息的字符串地址返回</strong></p>\n<p>在不同的系统和 C 语言标准库的实现中都规定了一些错误码，一般在 errno.h 头文件中说明</p>\n<p>程序启动的时候就会使用一个全局变量 errno 来记录程序的当前错误码 (初始为 0 表示无错)</p>\n<h5 id=\"使用实例-2\"><a class=\"anchor\" href=\"#使用实例-2\">#</a> 使用实例</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">44</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C语言笔记",
                "C",
                "函数"
            ]
        }
    ]
}